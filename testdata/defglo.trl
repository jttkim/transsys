transsys abc
{
  factor a { decay: 0.3; diffusibility: 0.3; }
  factor def { decay: 0.3; diffusibility: 0.3; }
  factor glo { decay: 0.3; diffusibility: 0.3; }
  factor b { decay: 1.0 ; diffusibility: 0.0; }
  factor c { decay: 0.3; diffusibility: 0.3; }
  factor bc { decay: 0.6; diffusibility: 0.3; }
  factor bc_act { decay: 0.1; diffusibility: 0.3; }
  factor nonfunc { decay: 0.3; diffusibility: 0.0; }
  factor cc { decay: 0.0; diffusibility: 0.0; }

  gene agene
  {
    promoter
    {
      // constitutive: 500.0; // gain of A
      constitutive: 0.1;
      a: activate(0.000000001, 50.0);
      c: repress(50.0, 100.0);
    }
    product
    {
      // default: nonfunc; // loss of A
      default: a;          // functional A
    }
  }

  gene defgene
  {
    promoter
    {
      // constitutive: 500.0; // gain of def
      constitutive: 0.00000001;
      def + glo: activate(0.0003, 51.0);
      bc: repress(80.0, 5000.0);
    }
    product
    {
      // default: nonfunc; // loss of def
      default: def;        // functional def
    }
  }

  gene glogene
  {
    promoter
    {
      // constitutive: 500.0; // gain of glo
      constitutive: 0.00000001;
      def + glo: activate(0.0003, 50.0);
      bc: repress(80.0, 5000.0);
    }
    product
    {
      // default: nonfunc; // loss of glo
      default: glo;        // functional glo
    }
  }

  gene brgene
  {
    promoter
    {
      def + glo : activate(1000000, 1000000);
    }
    product
    {
      default: b;
    }
  }

  gene cgene
  {
    promoter
    {
      // constitutive: 500.0; // gain of C
      cc: activate(0.5, 4.0);
      c: activate(10.0, 50.0);
      a: repress(1500.0, 20.0);
    }
    product
    {
      // default: nonfunc; // loss of C
      default: c;          // functional C
    }
  }

  gene bcgene
  {
    promoter
    {
      bc_act: activate(1.0, 5.0);
      bc: repress(1.0, 1.0);
    }
    product
    {
      default: bc;
    }
  }

  gene bc_actgene
  {
    promoter
    {
      constitutive: 0.1;
      bc_act: activate(0.05, 3.0);
      bc: repress(0.1, 5.0);
    }
    product
    {
      default: bc_act;
    }
  }

  gene ccgene
  {
    promoter
    {
      constitutive: 0.01;
    }
    product
    {
      default: cc;
    }
  }
# add some phenotypic realizator stuff...
# hashes should also be recognized in other than first column...

}


transsys store_abc
{
  factor a { decay: 0; diffusibility: 0; }
  factor b { decay: 0; diffusibility: 0; }
  factor c { decay: 0; diffusibility: 0; }
# auxiliary factors -- in fact, just variables
  factor cellmass { decay: 0; diffusibility: 0; }
  factor angle { decay: 0; diffusibility: 0; }
}

lsys l_abc
{
  symbol meristem(abc);
  symbol shoot_piece(store_abc);
  symbol whorl(store_abc);
  symbol whorl_center(store_abc);
  symbol pedicel(store_abc);
  symbol sepal(store_abc);
  symbol petal(store_abc);
  symbol stamen(store_abc);
  symbol carpel(store_abc);
  symbol [;
  symbol ];

  axiom meristem();

  rule meristem_growth
  {
    meristem(t) --> shoot_piece(a = t.a, b = t.b, c = t.c) meristem(transsys t: )
  }

  rule terminate_shoot
  {
    whorl(tcw) shoot_piece(ts) meristem(tm) : tm.c > 80 && tm.cc > 1.0 --> whorl(transsys tcw: ) shoot_piece(transsys ts: )
  }

  rule merge_pedicel
  {
    pedicel(t1) shoot_piece(t2) : t2.a < 80 && t2.b < 80 && t2.c < 80 --> pedicel(transsys t1: cellmass = t1.cellmass + 1)
  }

  rule create_pedicel
  {
    shoot_piece(t1) shoot_piece(t2) : t1.a < 80 && t1.b < 80 && t1.c < 80 && t2.a < 80 && t2.b < 80 && t2.c < 80 --> pedicel(transsys t1: cellmass = 1)
  }

  rule merge_sepal_whorl
  {
    whorl(t1) shoot_piece(t2) : t1.a > 80 && t1.b < 80 && t1.c < 80 && t2.a > 80 && t2.b < 80 && t2.c < 80 --> whorl(transsys t1: cellmass = t1.cellmass + 1)
  }

  rule create_sepal_whorl
  {
    shoot_piece(t1) shoot_piece(t2) : t1.a > 80 && t1.b < 80 && t1.c < 80 && t2.a > 80 && t2.b < 80 && t2.c < 80 --> whorl(transsys t1: cellmass = 1)
  }

  rule merge_petal_whorl
  {
    whorl(t1) shoot_piece(t2) : t1.b > 80 && t1.c < t2.a && t2.b > 80 && t2.c < t2.a --> whorl(transsys t1: cellmass = t1.cellmass + 1)
  }

  rule create_petal_whorl
  {
    shoot_piece(t1) shoot_piece(t2) : t1.b > 80 && t1.c < t1.a && t2.b > 80 && t2.c < t2.a --> whorl(transsys t1: cellmass = 1)
  }

  rule merge_stamen_whorl
  {
    whorl(t1) shoot_piece(t2) : t1.b > 80 && t1.c > t1.a && t2.b > 80 && t2.c > t2.a --> whorl(transsys t1: cellmass = t1.cellmass + 1)
  }

  rule create_stamen_whorl
  {
    shoot_piece(t1) shoot_piece(t2) : t1.b > 80 && t1.c > t1.a && t2.b > 80 && t2.c > t2.a --> whorl(transsys t1: cellmass = 1)
  }

  rule merge_carpel_whorl
  {
    whorl(t1) shoot_piece(t2) : t1.a < 80 && t1.b < 80 && t1.c > 80 && t2.a < 80 && t2.b < 80 && t2.c > 80 --> whorl(transsys t1: cellmass = t1.cellmass + 1)
  }

  rule create_carpel_whorl
  {
    shoot_piece(t1) shoot_piece(t2) : t1.a < 80 && t1.b < 80 && t1.c > 80 && t2.a < 80 && t2.b < 80 && t2.c > 80 --> whorl(transsys t1: cellmass = 1)
  }

  rule create_sepals
  {
    whorl(t1) : t1.a > 80 && t1.b < 80 && t1.c < 80  --> 
    whorl_center(transsys t1: )
    [ sepal(transsys t1: cellmass = 1, angle = 0) ]
    [ sepal(transsys t1: cellmass = 1, angle = 90) ]
    [ sepal(transsys t1: cellmass = 1, angle = 180) ]
    [ sepal(transsys t1: cellmass = 1, angle = 270) ]
  }

  rule create_petal
  {
    whorl(t1) : t1.b > 80 && t1.c < t1.a  --> 
    whorl_center(transsys t1: )
    [ petal(transsys t1: cellmass = 1, angle = 45) ]
    [ petal(transsys t1: cellmass = 1, angle = 135) ]
    [ petal(transsys t1: cellmass = 1, angle = 225) ]
    [ petal(transsys t1: cellmass = 1, angle = 315) ]
  }

  rule create_stamens
  {
    whorl(t1) : t1.b > 80 && t1.c > t1.a  --> 
    whorl_center(transsys t1: )
    [ stamen(transsys t1: cellmass = 1, angle = 0) ]
    [ stamen(transsys t1: cellmass = 1, angle = 60) ]
    [ stamen(transsys t1: cellmass = 1, angle = 120) ]
    [ stamen(transsys t1: cellmass = 1, angle = 180) ]
    [ stamen(transsys t1: cellmass = 1, angle = 240) ]
    [ stamen(transsys t1: cellmass = 1, angle = 300) ]
  }

  rule create_carpels
  {
    whorl(t1) : t1.a < 80 && t1.b < 80 && t1.c > 80  --> 
    whorl_center(transsys t1: )
    [ carpel(transsys t1: cellmass = 1, angle = 0) ]
    [ carpel(transsys t1: cellmass = 1, angle = 180) ]
  }

  graphics
  {
    meristem
    {
      move(1.0);
      color(0.2 + c / 200, 0.2 + a / 200, 0.2 + b / 200);
      sphere(0.8);
      move(1.0);
    }
    shoot_piece
    {
      move(0.25);
      color(0.2 + c / 200, 0.2 + a / 200, 0.2 + b / 200);
      cylinder(0.6, 0.4);
      move(0.25);
    }
    pedicel
    {
      move(0.1 * cellmass);
      color(0.4, 0.4, 0.4);
      cylinder(0.6, 0.18 * cellmass);
      move(0.1 * cellmass);
    }
    whorl
    {
      move(0.5);
      color(0.2 + c / 200, 0.2 + a / 200, 0.2 + b / 200);
      box(2 + 0.02 * cellmass, 2 + 0.02 * cellmass, 0.8);
      move(0.5);
    }
    sepal
    {
      roll(angle);
      color(0, 0.8, 0);
      bank(70);
      move(2);
      turn(45);
      box(2, 0.01, 2);
    }
    petal
    {
      roll(angle);
      color(0.8, 0.8, 0.8);
      bank(50);
      move(4);
      turn(45);
      box(5, 0.01, 5);
    }
    stamen
    {
      roll(angle);
      color(0, 0, 1);
      bank(20);
      move(2);
      cylinder(0.1, 3);
    }
    carpel
    {
      roll(angle);
      color(1, 0, 0);
      bank(10);
      move(1);
      box(0.7, 0.7, 0.5);
      move(1);
      bank(-9);
      box(0.2, 0.2, 3);
    }
    whorl_center
    {
      move(1.0);
    }
    [ { push(); }
    ] { pop(); }
  }
}


