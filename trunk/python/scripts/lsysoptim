#!/usr/bin/env python

# $Id$
# $Revision$
# $Author$
# $Date$

import sys
import getopt
import types
import os
import popen2
import copy
import random
import string
import math
import re

import transsys
# import transsys.clib
import transdecode
import transsys.optim


def read_framework(f) :
  p = transsys.TranssysProgramParser(f)
  transsys_program = p.parse()
  if not isinstance(transsys_program, transsys.TranssysProgram) :
    raise StandardError, 'bad trl file: first item is not a transsys program'
  lsys_program = p.parse()
  if not isinstance(lsys_program, transsys.LsysProgram) :
    raise StandardError, 'bad trl file: second item is not an lsys'
  return transsys_program, lsys_program


def write_transopt_comments(f, tp_opt, obj_opt, opt_descriptor) :
  f.write('// transsys %s: objective: %g (%s)\n' % (tp_opt.name, obj_opt.fitness, opt_descriptor))
  for rulename, best_factors in obj_opt.best_factor_list :
    f.write('//   %s' % rulename)
    glue = ': '
    for fname in best_factors :
      f.write('%s%s' % (glue, fname))
      glue = ', '
    f.write('\n')
  f.write(str(tp_opt))
  f.flush()


def write_combined(f, transsys_frame, lsys_frame, transsys_program) :
  lsys = copy.deepcopy(lsys_frame)
  lsys.dissociate_transsys()
  tp = copy.deepcopy(transsys_frame)
  tp.merge(transsys_program)
  lsys.associate_transsys(tp)
  f.write(str(tp))
  f.write(str(lsys))


def usage() :
  print 'command line options:'
  print '-n <int>: specify number of time steps (derivations)'
  print '-r <int>: specify number of random restarts'
  print '-s <int>: specify random seed'
  print '-f <lsysfile>: specify lsys framework'
  print '-o [stddev | overlap]: set objective function'
  print '-P <optspecfile>: specify file with optimiser specification'
  print '-T <transformerspecfile>: specify file with parameter transformer specification'
  print '-L <logfile>: specify optimisation log file'
  print '-v: verbose'
  print '-h: print this help and exit'


num_timesteps = 0
rndseed = 1
num_restarts = 0
frameworkfile_name = None
eliminateFlatComponents = False
delta = None
improvement_threshold = 0.0
disparity_function = None
verbose = 0
optimiserfile_name = None
transformererfile_name = None
logfile_name = None
options, args = getopt.getopt(sys.argv[1:], '-f:o:n:s:L:P:T:r:vh')
for opt, par in options :
  if opt == '-h' :
    usage()
    sys.exit()
  elif opt == '-f' :
    frameworkfile_name = par
  elif opt == '-o' :
    if par == 'stddev' :
      disparity_function = transsys.optim.stddev_disparity
    elif par == 'overlap' :
      disparity_function = transsys.optim.overlap_disparity
    else :
      raise StandardError, 'objective function "%s" not recognised' % par
  elif opt == '-n' :
    num_timesteps = int(par)
  elif opt == '-s' :
    rndseed = int(par)
  elif opt == '-L' :
    logfile_name = par
  elif opt == '-P' :
    optimiserfile_name = par
  elif opt == '-T' :
    transformerfile_name = par
  elif opt == '-r' :
    num_restarts = int(par)
  elif opt == '-v' :
    verbose = 1
    # transsys.clib.setverbose(0)
  else :
    raise StandardError, 'unknown option "%s"' % opt
if frameworkfile_name is None :
  raise StandardError, 'no framework lsysfile specified'
if optimiserfile_name is None and num_restarts > 0 :
  raise StandardError, 'no optimiser file given but %d restarts requested' % num_restarts
if optimiserfile_name is None and logfile_name is not None :
    raise StandardError, 'no optimiser file given but optimisation logfile "%s" requested' % logfile_name
f = open(frameworkfile_name, 'r')
transsys_frame, lsys_frame = read_framework(f)
f.close()
if optimiserfile_name is not None :
  f = open(optimiserfile_name, 'r')
  optimiser = transsys.optim.parse_optimiser(f)
  f.close()
  optimiser.verbose = verbose
  if transformerfile_name is not None :
    f = open(transformerfile_name, 'r')
    optimiser.transformer = transsys.optim.parse_parameter_transformer(f)
    f.close()
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout
objective_function = transsys.optim.LsysObjectiveFunction(lsys_frame, transsys_frame, disparity_function, num_timesteps)
# print str(optimiser)
p = transsys.TranssysProgramParser(infile)
outfile.write('// cmdline: %s\n' % ' '.join(sys.argv))
if logfile_name is not None :
  logfile = open(logfile_name, 'w')
else :
  logfile = None
transsys_program = p.parse()
tp_index = 0
while transsys_program is not None :
  if num_restarts == 0 :
    if optimiser is None :
      obj_opt = objective_function(transsys_program)
      write_transopt_comments(outfile, transsys_program, obj_opt, 'evaluated')
    else :
      optResult = optimiser.optimise(transsys_program, objective_function)
      obj_opt = objective_function(optResult.optimised_transsys_program)
      write_transopt_comments(outfile, optResult.optimised_transsys_program, obj_opt, 'optimised, original')
      if logfile is not None :
        optResult.write_log(logfile, '%d' % tp_index, tp_index == 0, 'tp_index')
        logfile.flush()
  else :
    for restart_index in xrange(num_restarts) :
      optResult = optimiser.optimise(transsys_program, objective_function)
      obj_opt = objective_function(optResult.optimised_transsys_program)
      write_transopt_comments(outfile, optResult.optimised_transsys_program, obj_opt, 'optimised, restart %d' % restart_index)
      if logfile is not None :
        optResult.write_log(logfile, '%d %d' % (tp_index, restart_index), tp_index == 0 and restart_index == 0, 'tp_index restart_index')
        logfile.flush()
  outfile.write('\n')
  transsys_program = p.parse()
  tp_index = tp_index + 1
