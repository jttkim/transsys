#!/usr/bin/env python

import sys
import getopt
import copy
import math

import transsys


def dot(argv) :
  dp = transsys.DotParameters()
  dp.factor_attributes = {'shape': 'hexagon'}
  dp.gene_attributes = {}
  dp.synthesis_attributes = {'color': 'green', 'arrowhead': 'diamond'}
  dp.factorexpr_attributes = {'color': 'blue', 'arrowhead': 'dot'}
  dp.activate_attributes = {'arrowhead': 'normal'}
  dp.repress_attributes = {'arrowhead': 'tee'}
  dp.display_factors = 0
  dp.display_synthesis = 0
  dp.cluster = 0
  dotpos = None
  gene_radius = 5.0
  factor_radius = 4.0
  options, args = getopt.getopt(argv, 'r:p:cfxsh')
  for opt, par in options :
    if opt == '-h' :
      print 'dot: create a representation of a transsys program in the dot language (see www.graphviz.org)'
      print '-p [circle]: specify method for placement (currently only "circle")'
      print '-r <radius>: specify radius for gene and factor circular placement, separated by comma'
      print '-c: cluster genes with factors they encode'
      print '-f: display factors'
      print '-s: show interactions affecting synthesis'
      print '-x: show factors occurring in mathematical expressions as edges'
      sys.exit()
    elif opt == '-p' :
      dotpos = par
    elif opt == '-r' :
      rlist = par.split(',')
      gene_radius = float(rlist[0])
      if len(rlist) > 1 :
        factor_radius = float(rlist[1])
    elif opt == '-f' :
      dp.display_factors = 1
    elif opt == '-x' :
      dp.display_factorexprs = 1
    elif opt == '-s' :
      dp.display_synthesis = 1
    elif opt == '-c' :
      dp.cluster = 1
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  if dotpos is None :
    pass
  elif dotpos == 'circle' :
    x0 = max(gene_radius, factor_radius)
    y0 = x0
    tp.dot_positions_circle(x0, y0, gene_radius, factor_radius)
  else :
    raise StandardError, 'dot position "%s" not known / supported' % dotpos
  tp.write_dot(outfile, dp)


def valuesets(argv) :
  options, args = getopt.getopt(argv, 'h')
  for opt, par in options :
    if opt == '-h' :
      print 'valuesets: write a table of numerical values for each position within the program\'s structure'
      print '    notice that all transsys programs must have equal structure'
      sys.exit()
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  if tp is None :
    return
  referenceTp = tp
  outfile.write('prg')
  for factor in referenceTp.factor_list :
    for i in xrange(len(factor.getValueNodes())) :
      outfile.write('\t%s.%d' % (factor.name, i))
  for gene in referenceTp.gene_list :
    for i in xrange(len(gene.getValueNodes())) :
      outfile.write('\t%s.%d' % (gene.name, i))
  outfile.write('\n')
  while tp is not None :
    if not referenceTp.structureEquals(tp) :
      raise StandardError, 'transsys program "%s" is not structurally equal to reference transsys program "%s"' % (referenceTp.name, tp.name)
    outfile.write('%s' % tp.name)
    for factor in tp.factor_list :
      for n in factor.getValueNodes() :
        outfile.write('\t%1.17e' % n.value)
    for gene in tp.gene_list :
      for n in gene.getValueNodes() :
        outfile.write('\t%1.17e' % n.value)
    outfile.write('\n')
    outfile.flush()
    tp = p.parse()


def deletelinks(argv) :
  options, args = getopt.getopt(argv, 'h')
  for opt, par in options :
    if opt == '-h' :
      print 'deletelinks: delete all link elements (activate, repress) from a transsys program'
      sys.exit()
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  for gene in tp.gene_list :
    i = 0
    while i < len(gene.promoter) :
      if isinstance(gene.promoter[i], transsys.PromoterElementLink) :
        del gene.promoter[i]
      else :
        i = i + 1
  outfile.write(str(tp))


def stats(argv) :
  options, args = getopt.getopt(argv, 'h')
  for opt, par in options :
    if opt == '-h' :
      print 'stats: print some stats for each transsys program in the input stream'
      print '    Note: this is intended to be human readable, not for further processing'
      sys.exit()
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  while tp is not None :
    numValuesFactor = 0
    numValuesGene = 0
    for factor in tp.factor_list :
      numValuesFactor = numValuesFactor + len(factor.getValueNodes())
    for gene in tp.gene_list :
      numValuesGene = numValuesGene + len(gene.getValueNodes())
    numValues = numValuesFactor + numValuesGene
    outfile.write('%s: %d factors, %d genes\n' % (tp.name, len(tp.factor_list), len(tp.gene_list)))
    outfile.write('  total values: %d, values in factors: %d, values in genes: %d\n' % (numValues, numValuesFactor, numValuesGene))
    outfile.write('\n')
    tp = p.parse()


def deletesinglelinks(argv) :
  options, args = getopt.getopt(argv, 'h')
  for opt, par in options :
    if opt == '-h' :
      print 'deletesinglelinks: write all transsys programs derived from the input program by deleting a single link element'
      sys.exit()
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  delNum = 0
  for geneNum in xrange(len(tp.gene_list)) :
    gene = tp.gene_list[geneNum]
    for i in xrange(len(gene.promoter)) :
      if isinstance(gene.promoter[i], transsys.PromoterElementLink) :
        tpDel = copy.deepcopy(tp)
        del tpDel.gene_list[geneNum].promoter[i]
        outfile.write(str(tpDel))
        outfile.write('\n\n')
        delNum = delNum + 1


def tpfileset(argv) :
  options, args = getopt.getopt(argv, 'h')
  for opt, par in options :
    if opt == '-h' :
      print 'tpfileset: read a set of transsys programs from input and write each in an individual file'
      sys.exit()
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) < 2 :
    raise StandardError, 'infile name and outfile basename required'
  infile = open(args[0], 'r')
  basename = args[1]
  p = transsys.TranssysProgramParser(infile)
  tpList = []
  tp = p.parse()
  while tp is not None :
    tpList.append(tp)
    tp = p.parse()
  formatString = '%s_%%0%dd.tra' % (basename, int(math.ceil(math.log10(len(tpList) + 1))))
  for i in xrange(len(tpList)) :
    f = open(formatString % i, 'w')
    f.write(str(tpList[i]))
    f.close()


def constitutiveonly(argv) :
  constitutive = 1.0
  options, args = getopt.getopt(argv, 'c:h')
  for opt, par in options :
    if opt == '-h' :
      print 'constitutiveonly: replace promoters with just one constitutive element'
      print '-c <num>: specify constitutive expression level'
      sys.exit()
    elif opt == '-c' :
      constitutive = float(par)
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  for gene in tp.gene_list :
    gene.promoter = [transsys.PromoterElementConstitutive(transsys.ExpressionNodeValue(constitutive))]
  outfile.write(str(tp))


def timeseries(argv) :
  num_timesteps = 100
  options, args = getopt.getopt(argv, 'n:h')
  for opt, par in options :
    if opt == '-h' :
      print 'timeseries: simulate gene expression time series'
      print '-n <num>: specify number of time steps'
      sys.exit()
    elif opt == '-n' :
      num_timesteps = int(par)
    else :
      raise StandardError, 'unknown option "%s"' % opt
  if len(args) > 0 :
    infile = open(args[0], 'r')
  else :
    infile = sys.stdin
  if len(args) > 1 :
    outfile = open(args[1], 'w')
  else :
    outfile = sys.stdout
  p = transsys.TranssysProgramParser(infile)
  tp = p.parse()
  ti_init = transsys.TranssysInstance(tp)
  ts = ti_init.time_series(num_timesteps)
  outfile.write('t')
  for factor in tp.factor_list :
    outfile.write(' %s' % factor.name)
  outfile.write('\n')
  for ti in ts :
    outfile.write('%d' % ti.timestep)
    for factor in tp.factor_list :
      outfile.write(' %1.17e' % ti.get_factor_concentration(factor.name))
    outfile.write('\n')
if len(sys.argv) < 2 :
  print 'usage: %s <command> [options]' % sys.argv[0]
  print 'commands are: constitutiveonly, deletelinks, deletesinglelinks, timeseries valuesets tpfileset'
  sys.exit()
cmd = sys.argv[1]
argv = sys.argv[2:]
if cmd == 'dot' :
  dot(argv)
elif cmd == 'constitutiveonly' :
  constitutiveonly(argv)
elif cmd == 'deletelinks' :
  deletelinks(argv)
elif cmd == 'stats' :
  stats(argv)
elif cmd == 'timeseries' :
  timeseries(argv)
elif cmd == 'valuesets' :
  valuesets(argv)
elif cmd == 'deletesinglelinks' :
  deletesinglelinks(argv)
elif cmd == 'tpfileset' :
  tpfileset(argv)
else :
  raise StandardError, 'command %s not known' % cmd
