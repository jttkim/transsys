#!/usr/bin/env python

# $Id$

# $Log$
# Revision 1.3  2005/10/28 19:06:40  jtk
# added RandomTranssysParameter unit test
#
# Revision 1.2  2005/10/13 08:58:35  jtk
# added a first test to unit testing framework
#
# Revision 1.1  2005/10/12 19:32:14  jtk
# parser test (nothing in here yet)
#

import sys
sys.path[0:0] = ['test/lib/python']
# print sys.path

import os
import StringIO
import unittest

import transsys
import transsys.optim
import transsys.clib
import transdecode



class TestTranssysParser(unittest.TestCase) :

  def setUp(self) :
    f = file('../testdata/check.tra', 'r')
    self.tp_check = f.read()
    f.close()
    self.tp_cycler = """transsys cycler
{
  factor A { decay: 0.1; }
  factor R { decay: 0.1; }

  gene agene
  {
    promoter
    {
      constitutive: 0.01;
      A: activate(0.01, 1.0);
      R: repress(0.1, 1.0);
    }
    product
    {
      default: A;
    }
  }

  gene rgene
  {
    promoter
    {
      A: activate(1.0, 10.0);
      R: repress(1.0, 1.0);
    }
    product
    {
      default: R;
    }
  }
}
"""

    self.lsys_arabidopsis = """transsys athgenome
{
  factor t
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor tl
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor elong
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor turtlepar
  {
    decay: 0.0;
    diffusibility: 0.0;
  }

  gene timerticker
  {
    promoter
    {
      constitutive: 0.05;
    }
    product
    {
      default: t;
    }
  }

  gene localticker
  {
    promoter
    {
      constitutive: 0.05;
    }
    product
    {
      default: tl;
    }
  }
}


lsys bolting
{
  diffusionrange: 3;

  symbol germ(athgenome);
  symbol meristem(athgenome);
  symbol axillary(athgenome);
  symbol leaf;
  symbol internode(athgenome);
  symbol hypocotyl;
  symbol cotyledon;
  symbol flowerpedicel;
  symbol flower(athgenome);
  symbol petal;
  symbol [;
  symbol ];

  symbol turtleroll(athgenome);
  symbol turtlebank(athgenome);
  symbol turtleturn(athgenome);

  axiom germ();

  rule germinate
  {
    germ(t) -->
    hypocotyl
    [ cotyledon ]
    turtleroll(turtlepar = 180)
    [ cotyledon ] meristem()
  }
  rule decussate
  {
    meristem(tm) : tm.t < 6 && tm.tl >= 1.0 -->
    turtleroll(turtlepar = 90)
    internode(transsys tm: tl = 0, elong = 0.1)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    turtleroll(turtlepar = 180)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    meristem(transsys tm: tl = 0)
  }
  rule spiral
  {
    meristem(tm) : tm.t >= 6 && tm.tl >= 1.0 -->
    turtleroll(turtlepar = 137.5)
    internode(transsys tm: tl = 0, elong = 0.1)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    meristem(transsys tm: tl = 0)
  }
  rule grow_flower
  {
    flower(tm) -->
    flowerpedicel
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
  }
  rule axil_flower
  {
    axillary(tm) : tm.tl > 1 && tm.tl < 2 && tm.t >= 9 --> flower(transsys tm: )
  }
  rule axil_awake
  {
    axillary(tm) : tm.tl > 1 && tm.tl < 6 && tm.t >= 9 -->
    meristem(transsys tm: )
  }
  rule bolt
  {
    internode(tm) : tm.t > 9 && tm.tl < 5 -->
    internode(transsys tm: elong = tm.elong + 0.025)
  }

  graphics
  {
    germ
    {
      color(1.0, 0.8, 0.2);
      sphere(0.4);
    }
    hypocotyl
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.2, 1.0);
      move(0.5);
    }
    cotyledon
    {
      push();
      bank(80);
      move(0.4);
      bank(90);
      color(0.5, 1.0, 0.0);
      cylinder(0.4, 0.1);
      pop();
    }
    leaf
    {
      push();
      bank(80);
      move(1.0);
      bank(90);
      roll(45);
      color(0.0, 1.0, 0.0);
      box(1.4, 1.4, 0.01);
      pop();
    }
    meristem
    {
      move(0.3);
      color(1, 0, 0);
      sphere(0.3);
      move(0.3);
    }
    axillary
    {
      move(0.3);
      color(0, 0, 1);
      sphere(0.3);
      move(0.3);
    }
    flower
    {
      move(0.2);
      color(1, 1, 1);
      box(0.1, 0.4, 0.4);
      move(0.2);
    }
    petal
    {
      push();
      bank(50);
      move(0.6);
      bank(90);
      roll(45);
      color(1.0, 1.0, 1.0);
      box(1.0, 1.0, 0.01);
      pop();
    }
    internode
    {
      move(0.55 * elong);
      color(0.0, 1.0, 0.0);
      cylinder(0.2, elong);
      move(0.55 * elong);
    }
    flowerpedicel
    {
      move(0.5);
      color(1, 1, 0);
      cylinder(0.1, 1.0);
      move(0.5);
    }
    turtleroll
    {
      roll(turtlepar);
    }
    turtlebank
    {
      bank(turtlepar);
    }
    turtleturn
    {
      turn(turtlepar);
    }
    [ { push(); }
    ] { pop(); }
  }
}
"""


    self.tp_testrndseed = """transsys testrndseed
{
  factor r { decay: 1.0; diffusibility: 0.0; }
  gene rgene
  {
    promoter
    {
      constitutive: random(0.1, 1.0);
    }
    product
    {
      default: r;
    }
  }
}
"""
    self.rtp = """RandomTranssysParameters-1.1
topology: random_nk
n: 8
k: 2
topology: end
constitutive: 0.1
km_activation: 0.1
km_repression: 0.1
vmax_activation: 1.0
vmax_repression: 1.0
decay: 0.2
diffusibility: 0.0
rndseed: 1
"""

    self.tdc = """TranssysDNADecoderParameters-1.3
thresholdBase: 1.1
thresholdIncrement: 0.2
factorNameTemplate: f%03d
geneNameTemplate: g%03d
geneStartRE: aa
geneEndRE: ttt
repressorAreaLength: 10
activatorAreaLength: 10
decay: 0.3
diffusibility: 0.1
a_spec: 0.2
a_max: 1
constitutive: 0.333
"""

    self.transfunc_exp = """ExponentialFunction
exponentMultiplier: 2.29999999999999982e+00
coefficient: 4.00000000000000022e-01
minValue: -1.10000000000000009e+00"""

    self.transfunc_sig = """SigmoidFunction
exponentMultiplier: 5.50000000000000044e-01
minValue: -2.20000000000000018e+00
maxValue: 3.29999999999999982e+00"""

    self.transfunc_lowerbounded = """LowerBoundedFunction
minValue: -2.60000000000000009e+00"""

    self.transfunc_arctan = """ArctanFunction
minValue: -7.70000000000000018e+00
maxValue: 4.20000000000000018e+00"""

  def getTestTranssys(self) :
    f = open('test.tra', 'w')
    f.write('%s\n' % self.tp_check)
    f.close()
    t = transsys.TranssysProgramParser(open('test.tra', 'r')).parse()
    os.unlink('test.tra')
    return t


  def testSrandom(self) :

    def factor_concentration_series(ti) :
      ts = ti.time_series(30)
      return map(lambda x: x.factor_concentration[0], ts)

    f = open('test.tra', 'w')
    f.write('%s\n' % self.tp_testrndseed)
    f.close()
    f = open('test.tra', 'r')
    tp = transsys.TranssysProgramParser(f).parse()
    os.unlink('test.tra')
    ti = transsys.TranssysInstance(tp)
    transsys.clib.srandom(1)
    l1 = factor_concentration_series(ti)
    l2 = factor_concentration_series(ti)
    transsys.clib.srandom(1)
    l3 = factor_concentration_series(ti)
    self.assertNotEqual(l1, l2)
    self.assertEqual(l1, l3)


  def testTransformationFunctions(self) :

    def read_tf(fname, s, tf) :
      f = open(fname, 'w')
      f.write(s)
      f.close()
      f = open(fname, 'r')
      tf.parse(f)
      f.close()
      os.unlink(fname)

    fname = 'tfunc.txt'
    xlist = map(float, range(-10, 50))
    tf = transsys.optim.ExponentialFunction()
    read_tf(fname, self.transfunc_exp, tf)
    self.assertEqual(self.transfunc_exp, str(tf))
    for x in xlist :
      dx = x - tf.inverse(tf(x))
      self.failUnless(abs(dx) < 1e-6)
    tf = transsys.optim.SigmoidFunction()
    read_tf(fname, self.transfunc_sig, tf)
    self.assertEqual(self.transfunc_sig, str(tf))
    for x in xlist :
      dx = x - tf.inverse(tf(x))
      self.failUnless(abs(dx) < 1e-4)
    tf = transsys.optim.LowerBoundedFunction()
    read_tf(fname, self.transfunc_lowerbounded, tf)
    self.assertEqual(self.transfunc_lowerbounded, str(tf))
    for x in xlist :
      dx = x - tf.inverse(tf(x))
      self.failUnless(abs(dx) < 1e-7)
    tf = transsys.optim.ArctanFunction()
    read_tf(fname, self.transfunc_arctan, tf)
    self.assertEqual(self.transfunc_arctan, str(tf))
    for x in xlist :
      dx = x - tf.inverse(tf(x))
      self.failUnless(abs(dx) < 1e-7)
    

  def testTranssysDNADecoder(self) :
    f = open('test.tdc', 'w')
    f.write(self.tdc)
    f.close()
    f = open('test.tdc', 'r')
    t = transdecode.TranssysDNADecoder()
    t.parse(f)
    f.close()
    f = open('test.tdc', 'w')
    t.write(f)
    f.close()
    f = open('test.tdc', 'r')
    s = f.read()
    f.close()
    os.unlink('test.tdc')
    self.assertEqual(self.tdc, s)


  def testSingleTranssys(self) :
    t = self.getTestTranssys()
#     f = file('check_expect.tra', 'w')
#     f.write(self.tp_check)
#     f.close()
#     f = file('check_parsed.tra', 'w')
#     f.write(str(t))
#     f.close()
    self.assertEqual(self.tp_check, str(t))


  def testTranssysInstanceCloning(self) :
    t = self.getTestTranssys()
    ti = transsys.TranssysInstance(t)
    for i in xrange(t.num_factors()) :
      ti.factor_concentration[i] = 0.1 * i * i + 0.3114
    ti_clone = ti.clone()
    self.assertEqual(ti.factor_concentration, ti_clone.factor_concentration)
    self.assert_(ti.factor_concentration is not ti_clone.factor_concentration, 'factor_concentration member in clone is same as in original')
    self.assert_(ti.transsys_program is ti_clone.transsys_program, 'transsys_program in clone is not same as in original')


  def testGetValueNodes(self) :
    t = self.getTestTranssys()
    f = t.find_factor('complex_expr')
    vn = f.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, [0.2, 3.0, 2.1, 0.4])
    g = t.find_gene('complex_gene')
    vn = g.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, [0.3, 0.2, 0.01, 0.7])
    factor_vn = [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1, 0.2, 3.0, 2.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.3, 0.4]
    gene_vn = [1.1, 0.1, 0.1, 1.0, 0.3, 0.2, 0.01, 0.7, 0.1, 1.0]
    gene_vn = [1.1, 0.1, 0.1, 1.0, 1.0, 0.3, 0.2, 0.01, 0.7, 0.1, 1.0, 0.0, 1.0, 10.0, 0.0, 1.0, 2.0, 47.11, 1.0, 2.0]
    vn = t.getFactorValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, factor_vn)
    vn = t.getGeneValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, gene_vn)
    vn = t.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, factor_vn + gene_vn)


  def testGetIdentifierNodes(self) :
    t = self.getTestTranssys()
    f = t.find_factor('complex_expr')
    identifierNodes = f.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['noparam', 'simple', 'complex_expr', 'simple', 'complex_expr', 'noparam', 'simple'])
    g = t.find_gene('complex_gene')
    identifierNodes = g.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['simple', 'simple', 'complex_expr', 'noparam', 'simple', 'complex_expr', 'noparam', 'simple'])
    g = t.find_gene('complex_factor_activated')
    identifierNodes = g.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['noparam', 'simple', 'complex_expr'])
    factor_identifierNodes = ['noparam', 'simple', 'complex_expr', 'simple', 'complex_expr', 'noparam', 'simple']
    # FIXME (??): exptected data built into code (perhaps acceptable for
    # unit testing??)
    gene_identifierNodes = ['noparam', 'simple', 'simple', 'complex_expr', 'noparam', 'simple', 'complex_expr', 'noparam', 'simple', 'noparam', 'simple', 'complex_expr', 'x', 'x', 'x']
    identifierNodes = t.getFactorIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, factor_identifierNodes)
    identifierNodes = t.getGeneIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, gene_identifierNodes)
    identifierNodes = t.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, factor_identifierNodes + gene_identifierNodes)


  def testTimeSeries(self) :
    f = open('test.tra', 'w')
    f.write(self.tp_cycler)
    f.close()
    tp = transsys.TranssysProgramParser(open('test.tra', 'r')).parse()
    os.unlink('test.tra')
    ti = transsys.TranssysInstance(tp)
    ts = ti.time_series(100)
    for i in xrange(100) :
      self.assertEqual(i, ts[i].timestep)
    ti99_x86_32 = """transsys instance of cycler
timestep: 99
  A: 4.16143791406925470e-05
  R: 4.06464135795106454e-03
"""
    ti99_x86_64 = """transsys instance of cycler
timestep: 99
  A: 4.16143791406926554e-05
  R: 4.06464135795107668e-03
"""
    ti99 = str(ts[99])
    self.assert_(ti99 == ti99_x86_32 or ti99 == ti99_x86_64)


  def testLsys(self) :
    f = open('test.trl', 'w')
    f.write(self.lsys_arabidopsis)
    f.close()
    f = open('test.trl', 'r')
    p = transsys.TranssysProgramParser(f)
    tp = p.parse()
    lp = p.parse()
    f.close()
    lp_expect = """lsys bolting
{
  diffusionrange: 3;

  symbol germ(athgenome);
  symbol meristem(athgenome);
  symbol axillary(athgenome);
  symbol leaf;
  symbol internode(athgenome);
  symbol hypocotyl;
  symbol cotyledon;
  symbol flowerpedicel;
  symbol flower(athgenome);
  symbol petal;
  symbol [;
  symbol ];
  symbol turtleroll(athgenome);
  symbol turtlebank(athgenome);
  symbol turtleturn(athgenome);

  axiom germ;

  rule germinate
  {
    germ(t)
    --> hypocotyl [ cotyledon ] turtleroll(turtlepar = 180.0) [ cotyledon ] meristem
  }

  rule decussate
  {
    meristem(tm):
    ((tm.t < 6.0) && (tm.tl >= 1.0))
    --> turtleroll(turtlepar = 90.0) internode(transsys tm: tl = 0.0, elong = 0.1) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] turtleroll(turtlepar = 180.0) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] meristem(transsys tm: tl = 0.0)
  }

  rule spiral
  {
    meristem(tm):
    ((tm.t >= 6.0) && (tm.tl >= 1.0))
    --> turtleroll(turtlepar = 137.5) internode(transsys tm: tl = 0.0, elong = 0.1) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] meristem(transsys tm: tl = 0.0)
  }

  rule grow_flower
  {
    flower(tm)
    --> flowerpedicel [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0)
  }

  rule axil_flower
  {
    axillary(tm):
    (((tm.tl > 1.0) && (tm.tl < 2.0)) && (tm.t >= 9.0))
    --> flower(transsys tm: )
  }

  rule axil_awake
  {
    axillary(tm):
    (((tm.tl > 1.0) && (tm.tl < 6.0)) && (tm.t >= 9.0))
    --> meristem(transsys tm: )
  }

  rule bolt
  {
    internode(tm):
    ((tm.t > 9.0) && (tm.tl < 5.0))
    --> internode(transsys tm: elong = (tm.elong + 0.025))
  }

  graphics
  {
    germ
    {
      color(1.0, 0.8, 0.2);
      sphere(0.4);
    }
    meristem
    {
      move(0.3);
      color(1.0, 0.0, 0.0);
      sphere(0.3);
      move(0.3);
    }
    axillary
    {
      move(0.3);
      color(0.0, 0.0, 1.0);
      sphere(0.3);
      move(0.3);
    }
    leaf
    {
      push();
      bank(80.0);
      move(1.0);
      bank(90.0);
      roll(45.0);
      color(0.0, 1.0, 0.0);
      box(1.4, 1.4, 0.01);
      pop();
    }
    internode
    {
      move((0.55 * elong));
      color(0.0, 1.0, 0.0);
      cylinder(0.2, elong);
      move((0.55 * elong));
    }
    hypocotyl
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.2, 1.0);
      move(0.5);
    }
    cotyledon
    {
      push();
      bank(80.0);
      move(0.4);
      bank(90.0);
      color(0.5, 1.0, 0.0);
      cylinder(0.4, 0.1);
      pop();
    }
    flowerpedicel
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.1, 1.0);
      move(0.5);
    }
    flower
    {
      move(0.2);
      color(1.0, 1.0, 1.0);
      box(0.1, 0.4, 0.4);
      move(0.2);
    }
    petal
    {
      push();
      bank(50.0);
      move(0.6);
      bank(90.0);
      roll(45.0);
      color(1.0, 1.0, 1.0);
      box(1.0, 1.0, 0.01);
      pop();
    }
    [
    {
      push();
    }
    ]
    {
      pop();
    }
    turtleroll
    {
      roll(turtlepar);
    }
    turtlebank
    {
      bank(turtlepar);
    }
    turtleturn
    {
      turn(turtlepar);
    }
  }
}
"""
    os.unlink('test.trl')
    self.assertEqual(lp_expect, str(lp))


  def testRandomTranssysParameters(self) :
    f = open('test.rtp', 'w')
    f.write(self.rtp)
    f.close()
    rtp = transsys.RandomTranssysParameters()
    rtp.parse(open('test.rtp', 'r'))
    os.unlink('test.rtp')
    tp = rtp.generate_transsys('test')
    f = open('t.tra', 'w')
    f.write('%s\n' % str(tp))
    f.close()
    tp_expect = """transsys test
// topology: random_nk
// n: 8
// k: 2
// topology: end
// constitutive: 0.1
// km_activation: 0.1
// km_repression: 0.1
// vmax_activation: 1.0
// vmax_repression: 1.0
// decay: 0.2
// diffusibility: 0.0
// rndseed: 1
// 
// serial #1
{
  factor f0000
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0001
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0002
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0003
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0004
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0005
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0006
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  factor f0007
  {
    decay: 0.2;
    diffusibility: 0.0;
    synthesis: 0.0;
  }

  gene g0000
  {
    promoter
    {
      constitutive: 0.1;
      f0001: activate(0.1, 1.0);
      f0006: repress(0.1, 1.0);
    }
    product
    {
      default: f0000;
    }
  }

  gene g0001
  {
    promoter
    {
      constitutive: 0.1;
      f0003: repress(0.1, 1.0);
      f0005: activate(0.1, 1.0);
    }
    product
    {
      default: f0001;
    }
  }

  gene g0002
  {
    promoter
    {
      constitutive: 0.1;
      f0000: repress(0.1, 1.0);
      f0006: repress(0.1, 1.0);
    }
    product
    {
      default: f0002;
    }
  }

  gene g0003
  {
    promoter
    {
      constitutive: 0.1;
      f0006: repress(0.1, 1.0);
      f0003: activate(0.1, 1.0);
    }
    product
    {
      default: f0003;
    }
  }

  gene g0004
  {
    promoter
    {
      constitutive: 0.1;
      f0001: activate(0.1, 1.0);
      f0007: repress(0.1, 1.0);
    }
    product
    {
      default: f0004;
    }
  }

  gene g0005
  {
    promoter
    {
      constitutive: 0.1;
      f0000: activate(0.1, 1.0);
      f0007: repress(0.1, 1.0);
    }
    product
    {
      default: f0005;
    }
  }

  gene g0006
  {
    promoter
    {
      constitutive: 0.1;
      f0001: repress(0.1, 1.0);
      f0000: repress(0.1, 1.0);
    }
    product
    {
      default: f0006;
    }
  }

  gene g0007
  {
    promoter
    {
      constitutive: 0.1;
      f0003: repress(0.1, 1.0);
      f0001: repress(0.1, 1.0);
    }
    product
    {
      default: f0007;
    }
  }
}
"""
    self.assertEqual(tp_expect, str(tp))


  def testGradientOptimiser(self) :
    # FIXME: copied from
    f = open('test.tra', 'w')
    f.write("""transsys single5
{
  factor f1 { decay: 0.1; diffusibility: 0.0; }

  gene g1
  {
    promoter
    {
      constitutive: 1.0;
    }
    product
    {
      default: f1;
    }
  }
}

""")
    f.close()
    tp = transsys.TranssysProgramParser(open('test.tra', 'r')).parse()
    os.unlink('test.tra')
    ti = transsys.TranssysInstance(tp)
    ts = ti.time_series(100)
    f = file('testseries.txt', 'w')
    for fi in xrange(len(tp.factor_list)) :
      factor = tp.factor_list[fi]
      f.write('%s:' % factor.name)
      for ti1 in ts :
        f.write(' %1.17e' % ti1.factor_concentration[fi])
      f.write('\n')
    f.close()
    f = file('testgrad.txt', 'w')
    f.write("""GradientOptimiser-0.1.1
initial_stepsize: 1.0
delta: 1e-3
stepsize_shrink: 0.5
termination_stepsize: 1e-5
termination_objective: None
termination_iteration: None
termination_numEvaluations: 100000
termination_improvement: None
termination_relative_improvement: None
stepsize_max: 1.0e6
eliminateFlatComponents: False
ParameterTransformer
""")
    f.close()
    f = file('testgrad.txt', 'r')
    optimiser = transsys.optim.parse_optimiser(f)
    f.close()
    # optimiser.verbose = 1
    optimiser.randomInitRange = 1.0
    os.unlink('testgrad.txt')
    f = file('testtransf.txt', 'w')
    f.write("""TranssysTypedParameterTransformer-1.1
decayTransformation
ArctanFunction
minValue: 0.0
maxValue: 1.0
diffusibilityTransformation
ArctanFunction
minValue: 0.0
maxValue: 1.0
synthesisTransformation
ArctanFunction
minValue: 0.0
maxValue: 1.0
constitutiveTransformation
ArctanFunction
minValue: 0.0
maxValue: 10.0
aspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
amaxTransformation
ArctanFunction
minValue: 0.0
maxValue: 100.0
rspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
rmaxTransformation
ArctanFunction
minValue: 0.0
maxValue: 100.0
""")
    f.close()
    f = open('testtransf.txt', 'r')
    optimiser.transformer = transsys.optim.parse_parameter_transformer(f)
    f.close()
    os.unlink('testtransf.txt')
    f = file('testseries.txt', 'r')
    objective = transsys.optim.ExpressionSeriesSquareSumObjective(f)
    f.close()
    os.unlink('testseries.txt')
    optResult = optimiser.optimise(tp, objective)
    tpValueNodes = tp.getValueNodes()
    tp_opt = optResult.optimised_transsys_program
    # print str(tp_opt)
    optTpValueNodes = tp_opt.getValueNodes()
    maxValueDiff = 0.0
    for i in xrange(len(tpValueNodes)) :
      d = abs(tpValueNodes[i].value - optTpValueNodes[i].value)
      if maxValueDiff < d :
        maxValueDiff = d
    # print maxValueDiff
    # print optResult.objectiveOptimum
    self.assert_(optResult.objectiveOptimum.fitness < 1e-5, 'excessive objective function value')
    self.assert_(abs(tp.factor_list[0].decay_expression.value - tp_opt.factor_list[0].decay_expression.value) < 1e-4, 'excessive deviation of decay values')
    self.assert_(abs(tp.gene_list[0].promoter[0].expression.value - tp_opt.gene_list[0].promoter[0].expression.value) < 1e-4, 'excessive deviation of constitutive values')
  
  
  def testStructureEquals(self) :
    tp1Str = """transsys tp1
{
  factor f1
  {
    decay: 0.0;
    diffusibility: 0.1;
    synthesis: 0.2;
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.3;
      constitutive: 0.4 + (f1 > 0.5) * 0.6;
      f1: activate(0.7, 0.8);
    }
    product
    {
      default: f1;
    }
  }
}
"""
    tp1equalStr = """transsys tp1equal // name different
{
  factor f1
  {
    decay: 0.7;
    diffusibility: 0.3;
    synthesis: 0.1;
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.8;
      constitutive: 0.2 + (f1 > 0.3) * 0.5;
      f1: activate(0.7, 0.2);
    }
    product
    {
      default: f1;
    }
  }
}
"""
    tp2Str = """transsys tp2
{
  factor f1
  {
    decay: 0.0;
    diffusibility: 0.1;
    synthesis: 0.2;
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.4 + (f1 > 0.5) * 0.6;  // statements switched
      constitutive: 0.3;
      f1: activate(0.7, 0.8);
    }
    product
    {
      default: f1;
    }
  }
}
"""
    tp3Str = """transsys tp3
{
  factor f1
  {
    decay: 0.0;
    diffusibility: 0.1;
    // synthesis statement missing
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.3;
      constitutive: 0.4 + (f1 > 0.5) * 0.6;
      f1: activate(0.7, 0.8);
    }
    product
    {
      default: f1;
    }
  }
}
"""
    tp4Str = """transsys tp4
{
  factor f1
  {
    decay: 0.0 + f1;  // different expression
    diffusibility: 0.1;
    synthesis: 0.2;
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.3;
      constitutive: 0.4 + (f1 > 0.5) * 0.6;
      f1: activate(0.7, 0.8);
    }
    product
    {
      default: f1;
    }
  }
}
"""
    tp5Str = """transsys tp5
{
  factor f // different name
  {
    decay: 0.0;
    diffusibility: 0.1;
    synthesis: 0.2;
  }

  gene g1
  {
    promoter
    {
      constitutive: 0.3;
      constitutive: 0.4 + (f > 0.5) * 0.6;
      f: activate(0.7, 0.8);
    }
    product
    {
      default: f;
    }
  }
}
"""
    tp1 = transsys.TranssysProgramParser(StringIO.StringIO(tp1Str)).parse()
    tp1equal = transsys.TranssysProgramParser(StringIO.StringIO(tp1equalStr)).parse()
    tp2 = transsys.TranssysProgramParser(StringIO.StringIO(tp2Str)).parse()
    tp3 = transsys.TranssysProgramParser(StringIO.StringIO(tp3Str)).parse()
    tp4 = transsys.TranssysProgramParser(StringIO.StringIO(tp4Str)).parse()
    tp5 = transsys.TranssysProgramParser(StringIO.StringIO(tp5Str)).parse()
    self.assertTrue(tp1.structureEquals(tp1))
    self.assertTrue(tp1.structureEquals(tp1equal))
    self.assertFalse(tp1.structureEquals(tp2))
    self.assertFalse(tp1.structureEquals(tp3))
    self.assertFalse(tp1.structureEquals(tp4))
    self.assertFalse(tp1.structureEquals(tp5))


suite = unittest.TestSuite()
suite.addTest(unittest.makeSuite(TestTranssysParser))
result = unittest.TextTestRunner(verbosity = 2).run(suite)
if result.wasSuccessful() :
  sys.exit()
else :
  sys.exit(1)

# unittest.main()

