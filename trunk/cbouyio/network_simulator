#!/usr/bin/env python

# First approach to explore some network statistic measures within the 
#+transsys framework
# CBouyio, UEA, 18-23 Jan 2006


import re
import sys
import getopt

import transsys


def usage() :
  print """Usage:"""


def Clustering_Coefficient(grn) :
  """Function for caclulating the Clustering Coefficient (CC) of a network, as 
  defined in (Watts and Strogatz 1998, Nature 393, 440). Adapted here, from 
  (Albert and Barabasi, Stastical mechanics of Complex Networks). Takes the 
  network in a dictionary format, and calculates the mean CC of it."""
  # Clustering Coefficient (mean) of the network
  cc = 0
  # Clustering Coefficient of each node
  c = 0
  # Loop through all the linked nodes (genes) of the network
  for links in grn.itervalues() :
    ccg = 0
    E = 0
    if len(links) > 1 :
      for gene in  links:
        for reg_gene in grn[gene] :
          if reg_gene in links :
            E = E + 1
      # Calculate the Clusterung Coefficient of each node
      ccg = float(E)/float((len(links)*(len(links) - 1)))
    # Calculate the sum for the whole network
    c = c + ccg
  # Calculate the mean Clustering Coefficient of the network
  cc = c/len(grn.keys())
  return cc


######## make it to work both with .tra as well as with .rtp files....!!!!!!
# Two options.....!!!


try:
  optlist, args = getopt.getopt(sys.argv[1:],"h",["help"])
except getopt.GetoptError, error_msg:
  # Print help info and exit
  error_msg = 'Error in arguments passing, see usage'
  print error_msg
  usage()
  sys.exit(1)

for opt, par in optlist:
  if opt in ("-h","--help"):
    usage()
    sys.exit(1)


# I/O manipulation
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  print "\n!!! Please specify an .rtp file for input\n"
  usage()
  sys.exit(1)
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout


# Create an instance of the class
rtp = transsys.RandomTranssysParameters()

# Parse the input file
rtp.parse(infile)

# Extract the correspondant transsys program name with a regular expression
name = re.search("\w+(?=\.\w)", str(sys.argv[1]))

# Generates the transsys program. Look the group(0) method of RE
tp = rtp.generate_transsys(name.group(0))


## Try to printout some network's properties....

# This dictionary contains all the Gene Regulatory Network
gene_network = {}

# Loop through all genes
for genes in tp.gene_list :
  gene_links   = []
  gene_name = genes.name 
  for pe in xrange(len(genes.promoter)) :
    # Get only the regulatory promoter element(s) (NOT the constitutive)
    if not re.match("constitutive", str(genes.promoter[pe]) ,1) :
      # Get the regulatory factor
      for factor in genes.promoter[pe].factor_list :
	# Get the gene(s) encoding for this factor
	for g in tp.encoding_gene_list(factor.name) :
	  gene_links.append(g.name)
  # Represent the network as a dictionary
  gene_network[gene_name] = gene_links

C_coeff = Clustering_Coefficient(gene_network)

# Printouts
outfile.write('Clustering Coefficient: %.15f \n' % C_coeff)


sys.exit()
# Print out the network in a more "Human Readable format"
for sorted_key in sorted(gene_network.keys()) :
  outfile.write("%s -> %s \n" % (sorted_key, gene_network[sorted_key]))


# Closes the files
infile.close()
outfile.close()

