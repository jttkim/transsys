#!/usr/bin/env python

# First approach to explore some network statistic measures within the 
#+transsys framework
# CBouyio, UEA, 18-23 Jan 2006


import re
import sys
import getopt

import transsys


def usage() :
  print """Usage:"""


def clustering_coefficient(grn) :
  """Function for caclulating the Clustering Coefficient (CC) of a network, as 
  defined in (Watts and Strogatz 1998, Nature 393, 440). Adapted here, from 
  (Albert and Barabasi, Stastical mechanics of Complex Networks). Takes the 
  network in a dictionary format, and returnrs the mean CC of it."""
  # Clustering Coefficient of each node
  c = 0
  # Loop through all the linked nodes (genes) of the network
  for links in grn.itervalues() :
    if len(links) > 1 :
      ccg = 0
      e = 0
      for gene in links:
        for reg_gene in grn[gene] :
          if reg_gene in links :
            e = e + 1
      # Calculate the Clusterung Coefficient of each node
      ccg = float(e) / float((len(links) * (len(links) - 1)))
      # Calculate the sum for the whole network
      c = c + ccg
  # Calculate the mean Clustering Coefficient of the network
  cc = c / len(grn.keys())
  return cc


######## make it to work both with .tra as well as with .rtp files....!!!!!!
# Two options.....!!!


try:
  optlist, args = getopt.getopt(sys.argv[1:],'h',['help'])
except getopt.GetoptError, error_msg:
  # Print help info and exit
  error_msg = 'Error in arguments passing, see usage'
  print error_msg
  usage()
  sys.exit(1)

for opt, par in optlist:
  if opt in ('-h','--help'):
    usage()
    sys.exit(1)

# I/O Manipulation
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout


# Create an instance of the class
rtp = transsys.RandomTranssysParameters()

# Parse the input file
rtp.parse(infile)


# JTK: get base name of file as a regular expression group
# JTK: use infile 
# Extract the correspondant transsys program name with a regular expression
if infile is not sys.stdin :
  m = re.match('([A-Za-z][A-Za-z0-9_]*)\\.rtp', infile.name)
  if m is None :
    raise StandardError, 'Expected an rtp file'
  name = m.group(1)
else :
  name = 'STDIN'

# Generates the transsys program. 
tp = rtp.generate_transsys(name)


# Printout some network's properties....

# This dictionary contains all the Gene Regulatory Network
gene_network = {}

# Loop through all genes
for genes in tp.gene_list :
  gene_links   = []
  gene_name = genes.name 
  for pe in genes.promoter :
    # Get only the regulatory promoter element(s) (NOT the constitutive)
    # !!! use objects
    if not isinstance(pe, transsys.PromoterElementConstitutive) :
      # Get the regulatory factor
      for factor in pe.factor_list :
	# Get the gene(s) encoding for this factor
	for g in tp.encoding_gene_list(factor.name) :
	  gene_links.append(g.name)
  # Represent the network as a dictionary
  gene_network[gene_name] = gene_links


# Calculate the Clustering Coefficient of the network.
c_coeff = clustering_coefficient(gene_network)

# Printouts
outfile.write('Clustering Coefficient: %.15f \n' % c_coeff)


sys.exit()
# Print out the network in a more "Human Readable format"
for sorted_key in sorted(gene_network.keys()) :
  outfile.write('%s -> %s \n' % (sorted_key, gene_network[sorted_key]))


# Closes the files
infile.close()
outfile.close()

