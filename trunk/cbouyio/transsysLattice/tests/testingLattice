#!/bin/sh

# $Rev::               $:  Revision of last commit
# $Author::            $:  Author of last commit
# $Date$:  Date of last commit

# Script to conduct several tests on the latticeSimulator python program.
# First developed by Cbouyio UEA 15/05/2006.

# Usage.
if test "$1" == "--help"  || test "$1" = "-h"  ;
then
  echo "Usage: $0  (the tests run without any option)"
  echo "Conducting a collection of tests to the latticeSimulator python program.
For more info about the tests check the source code."
  exit $?
fi

# Define the compulsory program options.
LATTICESIZE=10x10
TIMESTEPS=50


# The directory should contain some "xxxOut.expect" expected files and the 
# coresponding "xxxxTest.tra" transsys program files.

if test ! -f naiveTest.tra || test ! -f naiveOut.expect ;
then
  echo "Can't find the prerequisite naive testing files."
  exit $?
elif test ! -f zeroTest.tra || test ! -f zeroOut.expect ;
then
  echo "Can't find the prerequisite zero testing files."
  exit $?
fi


####### Not used anymore, the script exit with an exit code upon any failure.
## Initialise some counters.
#failure=0
#success=0
#notests=0


# Test No 0: The naive base test for the latticeSimulator program.
# Run on a geneless transsys program with all the values set to zero and in
# zero timesteps and lattice size of 1.
if ! latticeSimulator -n 1x1 -t 0 naiveTest.tra naivetestTMP.out
then
  exit $?
else
  let notests++
  if ! diff naiveOut.expect naivetestTMP.out ;
  then
    echo "naive test: failed..."
    echo "files naiveOut.expect naivetestTMP.out differ!"
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'naive test: successful!'
  #  let success++
  fi
fi


# Test No 1: Zero test for the latticeSimulator program.
# Run on a geneless transsys program, with diffusibility and decay set to zero.
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS zeroTest.tra zerotestTMP.out
then
  exit $?
else
  let notests++
  if ! diff zeroOut.expect zerotestTMP.out ;
  then
    echo "zero test: failed... "
    echo "files zeroOut.expect zerotestTMP.out differ!"
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'zero test: successful!'
  #  let success++
  fi
fi


# Test no 2: Decay test for the latticeSimulator program.
# Testing the simulator -x option (concentration:timestep) & the exponential
# decay rate.
# Run on a geneless transsys program with zero diffusibility and decay rate=0.5
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -x 10:0 decayTest.tra decaytestTMP.out
then
  exit $?
else
  let notests++
  if ! diff decayOut.expect decaytestTMP.out ;
  then
    echo 'decay test: failed...'
    echo 'files decayOut.expect decaytestTMP.out differ!'
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'decay test: successful!'
  #  let success++
  fi
fi
# Conduct some further test with R, to check the exponential deacay rate.


# Test No 3: Test the lattice size, the shannon Entropy measure depends ONLY
# in the lattice size.
# The test runs on an identical program with the decay test. the .tra file has
# a different name to avoid the generation of the same directory.
# The test involves two comparisons, first the outfile should be identical with
# the expected and second the outfile should be different from the decay test
# expected. The signa need not to be adapted because the signal introduction
# occurs in 4 cells for even lattice sizes...!!!
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -x 10:0 -n 10 sizetest.tra sizetestTMP.out
let notests++
# Introduce a flag because there are two condition that might result to the failure of test.
#flag=0
if ! diff size.out.expect sizetestTMP.out ; then
  echo "size test: failed...
files size.out.expect sizetestTMP.out differ!!!"
  rm *TMP.out
  exit $?
#  let flag++
elif cmp -s decay.out.expect sizetestTMP.out ; then
  echo 'size test: failed...
files decay.out.expect sizetestTMP.out are the same!!!'
  rm *TMP.out
  exit $?
#  let flag++
else
  echo 'size test: successful!'
#  let success++
fi

## Is not used anymore, intoduce an exit code instead.
## Check the flag and then increment the failure parameter.
#if [[ $flag != 0 ]]; then
#  let failure++
#fi


# Test no 4: Diffusibility test between the cells on the lattice.
# The test runs on a simple transsys program of two factors encoded by two
# genes where each gene is expressed indepententlly and constitutively (0.5).
# (Check the corresponding transsys program for more details)
# Checks out the "per factor" diffusibility mechanism by using two factors with
# the extreme possible values for diffusibility factor_A=1.0 and factor_B=0.0
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS intertest.tra intertestTMP.out
let notests++
if ! diff inter.out.expect intertestTMP.out ; then
  echo 'interaction test: failed...
files inter.out.expect intertestTMP.out differ!!!'
  rm *TMP.out
  exit $?
#  let failure++
else
  echo 'interaction test: successful!'
#  let success++
fi
# Conduct some further tests with R, to check the 100% diffusion of the factors
# between the cells on the lattice.


# Test No 5: Test the number/name of factors and the signal mechanism.
# The test runs on a more complicated transsys program with two genes encoding
# for two factors, one activator one repressor.
# The test runs using the signal mechanism, -s switcher by denoting a factor
# name and a factor concentration. (The rest of the parameters default)
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -s FACTOR_A:10 factorstest.tra factorstestTMP.out
let notests++
if ! diff factors.out.expect factorstestTMP.out ; then
  echo 'factors-signal test: failed...
files factors.out.expect factorstestTMP.out differ!!!'
  rm *TMP.out
  exit $?
#  let failure++
else
  echo 'factors-size test: successful!'
#  let success++
fi


# Test No 6: Test the timestep switch and mechanism.
# The test runs on a simple transsys program with two genes two factors,
# similar with the factorstest.tra program.
# It test the operation of the timesteps switch (-t) as well as the timesteps
# output. All the rest parameters are set to default.
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -t 99 timesteptest.tra timesteptestTMP.out
let notests++
if ! diff timestep.out.expect timesteptestTMP.out ; then
  echo 'timesteps test failed...
files timestep.out.expect timesteptestTMP.out differ!!!'
  rm *TMP.out
  exit $?
#  let failure++
else
  echo 'timesteps test: successful!'
#  let success++
fi


# Print the final message.
echo
rm *TMP.out
echo "all $notests tests run succefully!!!"
#if [[ $failure = 0 ]] ; then
#  echo "all $success out of $notests tests run successfully!!!"
#else
#  echo "not all tests run succefully. $success out of $notests succeed and $failure out of $notests tests failed...!!!"
#fi

