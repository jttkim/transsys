#!/usr/bin/env python

# $Rev:: 245           $:  Revision of last commit
# $Author:: cbouyio    $:  Author of last commit
# $Date: 2007-01-05 20:39:38 +0000 (Fri, 05 Jan 2007) $:  Date of last commit


"""
latticeSimulator: Implement the simulation procedures on a lattice.

@author: Costas Bouyioukos
@email: konsb@cmp.uea.ac.uk
@organisation: University of East Anglia
@since: April 2006
@license: GNU General Public Lisence 2 or newer.
@contact: U{Costas Bouyioukos<mailto:konsb@cmp.uea.ac.uk>}
@version: $Id$
"""

# Version Information.
__version__ = '$Id$'


# latticeSimulator: A program that simulates a lattice of trannsys instances
# on a nxn lattice, each cell of the lattice cantains one transsys program.
# The program applies communication between neighbour cells and is an attempt
# to simulate the processes described in "Soile V. E. Keranen, 2004. Simulation
# study on effects of signaling network structure on the developmental
# increase in complexity."
# Start developing by CBouyio in Aprill 2006 at UEA
# Implemented as a python module on 11th September 2006

import getopt
import sys
import re

import transsys.clib
import translattice
import transsys

def usage() :
  print """Usage:
./latticeSimulator [options] arguments
  Options:
           -g: Number:Number   The gaussian distribution variables (mean,
                               stddev) for the initialisation of the factors.
                               (should be of the form 'number:number')
           -d: Integer         Sampling interval. (integer)
                               (default: 1)
-f, --factors: switch          Print the factors' names and exit.
   -h, --help:                 Prints this screen and exit.
           -n: IntegerxInteger The size (width, heght) of the lattice, is
                               mandatory parameter. (should be of the form
                               'integer x integer')
           -p: String          Print in the specified file the summary
                               statistics of the simulation. (string)
                               (Default: Print the factor table in the outfile)
           -q: String          Print in the specified file the pickle output of
                               the simulation. (string)
           -r: Integer         The random number generator seed. (integer)
                               (Default: 1)
           -s  String          Initalise factor concentrations parameter. The
                               initial rfactor concentration value is specified
                               from the user. (the format of the parameter
                               should be a whitespace separated strings of
                               elements in which each element specifies the
                               factor and its initial concentration in a
                               'name:concentration' format.)
           -t: Integer         The number of timesteps. (integer)
                               (Mandatory parameter)
           -u: Number:Number   The range (a, b) of the borders of a uniform
                               distribution (should be in the format
                               'number:number').
           -x: Number:Integer  Timestep signal switch,
                               (FactorConcentration:Timestep) All factors will
                               get the defined concentration at the defined
                               timestep (float:integer).
  Arguments:
     <infile>: A file containing transsys program(s) (.tra) file or <STDIN> if not specified
    <outfile>: An output file or <STDOUT> if not specified)
    """



####### Simulator's Parameter Initialization #################################
latticeSize      = None  # Dimension of the lattice.(-n ixj)
noTimesteps      = None  # Number of simulation timesteps.(-t)
randomSeed       = 1     # Random number generator seed.(-r)
samplingInterval = 1     # The sampling interval. (-d)
initialFactorDict= None  # Factor concentration dictonary of the signal at the
                         # initial timestep. (-s)
signalTimestep   = None  # "signal" introduction at timestep.(-x)
unifRange        = None  # Border range (lower, upper) of the random uniform
                         # initialisation of the lattice factor concentrations.
                         # (-u)
gaussVariables   = None  # Variables (mean, standard deviation) of the gaussian
                         # random initialisation of the lattice factor
                         # concentration values. (-b)
summaryFile      = None  # Filename of the summary statistics file.(-p)
transsysFactors  = False # Factor names switch.(-f, --factors) 
pickleFile       = None  # Pickle file name (-q).


## Command line parsing.
optlist, args = getopt.getopt(sys.argv[1:], 'd:fg:hn:p:q:r:s:t:u:x:', ['help', 'factors'])

for opt, par in optlist :
  if opt in ('-h', '--help') :
    usage()
    print __version__
    sys.exit()
  if opt in ('-n') :
    if len(par.split('x')) == 2 :
      ls = par.split('x')
      latticeSize = translattice.LatticeSize(int(ls[0]), int(ls[1]))
    else :
      raise StandardError, 'Error in the format of -n input options, please check the help (-h, --help) for more information'
  if opt in ('-t') :
    noTimesteps = int(par)
  if opt in ('-r') :
    randomSeed = int(par)
  if opt in ('-x') :
    if len(par.split(':')) == 2 :
      signalTimestep = translattice.SignalTimestep(float(par.split(':')[0]), int(par.split(':')[1]))
    else :
      raise StandardError, 'Error in the format of -x input options, please check the help (-h, --help) for more information.'
  if opt in ('-p') :
    summaryFile = par
  if opt in ('-u') :
    if len(par.split(':')) == 2 :
      unifRange = translattice.UniformParameters(float(par.split(':')[0]), float(par.split(':')[1]))
    else :
      raise StandardError, 'Error in the format of -u input options, please check the help (-h, --help) for more information.'
  if opt in ('-g') :
    if len(par.split(':')) == 2 :
      gaussVariables = translattice.GaussianParameters(float(par.split(':')[0]), float(par.split(':')[1]))
    else :
      raise StandardError, 'Error in the format of gaussian distribution parameter parsing (-b option), they should be separated by a colon (:) and the second parameter (stddev) should always be positive. Please check the help (-h, --help) for more information.'
  if opt in ('-f', '--factors'):
    transsysFactors = True
  if opt in ("-q") :
    pickleFile = par
  if opt in ("-d") :
    samplingInterval = int(par)
  if opt in ("-s") :
    fList = par.split(' ')
    initialFactorDict = {}
    for el in fList :
      if len(el.split(':')) == 2 :
        initialFactorDict[el.split(':')[0]] = float(el.split(':')[1])
      else :
        raise StandardError, "Error in initial factor concentrations parsing. Check the syntax of the -s option or give -h,--help for more info."


#print optlist
#sys.exit()


# Mandatory options checking.
if not transsysFactors :
  if not latticeSize :
    raise StandardError, '-n option mandatory. Specify a size for the lattice or give -h, --help for more information.'
  if noTimesteps is None :
    raise StandardError, '-t option mandatory. Specify number of timesteps or give -h, --help for more information.'
  if unifRange and gaussVariables :
    raise StandardError, 'Initialisation of the lattice can only take values from either uniform of Gauss distribution but not from both.'
else :
  if len(optlist) > 1 :
    raise StandardError, '--factors option only for printing factors, cannot used for a proper program running.'



## I/O manipulation.
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout



################
## Main program.
################

# Instantiate and parse the transsys program.
transsysProgram  = transsys.TranssysProgramParser(infile).parse()
# Close the input file.
if infile is not sys.stdin :
  infile.close()

# Print the transsys factors names (if asked).
if transsysFactors :
  for factorName in transsysProgram.factor_names() :
    outfile.write('%s\n' % factorName)
  sys.exit()


############################
# Main part of the simulator
############################

# Instantiate the lattice of transsys programs.
transInstanceLattice = translattice.TranssysInstanceLattice(transsysProgram, latticeSize)

# Initialise the factor concentrations on the lattice.
if unifRange :
  rndObj = translattice.UniformRNG(randomSeed, unifRange.lower, unifRange.upper)
  transInstanceLattice.perturb_lattice(rndObj)
elif gaussVariables :
  rndObj = translattice.GaussianRNG(randomSeed, gaussVariables.mean, gaussVariables.stddev)
  transInstanceLattice.perturb_lattice(rndObj)

# Introduce a signal by specifing a factor and the desired concentration.
if initialFactorDict :
  transInstanceLattice.signal_factor_concentration(initialFactorDict)

# Produce the timeseries.
# Before each invocation set the clib random seed.
transsys.clib.srandom(randomSeed)
transsysLatticeTimeseries = translattice.TranssysLatticeTimeseries(transInstanceLattice, noTimesteps, samplingInterval, signalTimestep)

# Print the factor table to the output file.
# First write the comments and the header.
transInstanceLattice.write_table_header(outfile, randomSeed)
# Then write the whole stuff.
transsysLatticeTimeseries.write_factor_table(outfile)

# Print the summary statistics to a user specified file.
if summaryFile :
  fileObj = open(summaryFile, 'w')
  translattice.print_summary_statistics(transsysLatticeTimeseries.latticeTimeseries, fileObj)
  fileObj.close()

# Export the pickle file
if pickleFile :
  pickleFileObj = open(pickleFile, 'w')
  pickleFileObj.write(translattice.pickle(transInstanceLattice))
  pickleFileObj.close()

# Close output file and exit.
if outfile is not sys.stdout :
  outfile.close()

sys.exit()

