#!/usr/bin/env python

# generate a transsys program,
# n "mutant" transsys programs with one knockout each time,
# build matrix_D and create disruption network

# $Id$

# $Log$
# Revision 1.1  2005/03/08 17:12:02  jtk
# Initial revision
#
# Revision 1.21  2004/04/13 17:35:54  kim
# minor changes, somewhat longer ago...
#
# Revision 1.20  2003/07/06 13:35:36  klatt
# cleaned things up
#
# Revision 1.19  2003/06/19 20:10:24  klatt
# writes a lot of data about one reconstruction run
#
# Revision 1.18  2003/06/05 18:52:23  klatt
# put several classes / functions in module 'transdisrupt.py'
# renamed several functions (i.e. removed a couple of 'get_')
# fixed time-consuming and possibly buggy code (knockout_tp = TrannssysIns...)
# added controlParameterParser (not really working yet just included)
# modified write_gene_info (fomerly known as write_inout_degree)
#
# Revision 1.17  2003/05/08 20:14:29  klatt
# added color dot_attributes
#
# Revision 1.16  2003/04/10 18:20:26  klatt
# added write_gnuplot_commandfile.
#
# Revision 1.15  2003/04/08 07:48:41  klatt
# removed calculation for multiple gammas
#
# Revision 1.14  2003/03/24 18:13:33  schwarzd
# apsp update.
#
# Revision 1.13  2003/03/20 21:56:10  kim
# various changes / improvements: switched to isinstance(), debugged
#     adjacency matrix etc.
#
# Revision 1.12  2003/03/20 19:27:54  klatt
# splitted a couple of actions into smaller pieces. still working on in/out degree. [SK]
#
# Revision 1.11  2003/03/20 16:07:41  kim
# fixed error of reversed edge direction in create_disruption_network,
#     other small changes
#
# Revision 1.10  2003/03/20 13:52:01  klatt
# added adjacency_matrix, inout_degrees and modified write_datatable [SK]
#
# Revision 1.9  2003/03/19 20:20:21  klatt
# added write_datatable
# modified disruption_network; now it returns the disruption_network...
# modified score_matrix (took promoter out of subroutine so i can use it
# too)
# change score_matrix entry from 0.0 to 0 (it should be integer i guess)
# modified __str__ in ExpressionSim.Matrix: it can now handle None-Elements
#
# Revision 1.8  2003/03/19 16:58:09  klatt
# modified code-structure to be more logical. it is also possible now to access the matrices in the mainprocedure: disruption_network.
#
# disruption_network now is concentration_matrix (returns E)
# matrix_D now is evaluation_matrix (returns D)
# try_gammas now is disruption_network (still returns a list of Gammas-will be changed)
#
# 1.7  2003/03/17 19:56:28  schwarzd
# added apsp
#
# Revision 1.6  2003/03/13 21:26:31  klatt
# started documentation
#
# added distribution which returns a set of cartesian coordinates to plot the distribution of a set of datapoints (still needs some modifications)
#
# added member to ExpressionSimilaryMatrix: return_as_list() that does what its called...[SK]
#
# Revision 1.5  2003/03/12 19:37:30  schwarzd
# somehow made things neat.  added/modified Gamma class and ErrorLogger, which might need some modification.  at the moment get_overlap returns:
# 1) transsysProgram for disruption network
# 2) dot files for dis_netw, orig_netw, overlap_orig_netw, overlap_dis_netw
# 3) gnuplot file for various things like gamma, sens, spec, recEdges,...
# (each point is returned once: for the "best" gamma)
#
# this will be changed in near future. we intend to return the reconstructed network based on a certain (optimal) gamma value.
#
# added commandline options (l,u,d).
#
# Revision 1.4  2003/03/05 19:43:52  klatt
# nothing really changed
#
# Revision 1.3  2003/03/05 17:55:25  kim
# changed Matrix to ExpressionSimilarityMatrix which is accessed by
#     names rather than integer indices.
#     Wrote Gamma_CorrectEdges for demo purposes
#
# Revision 1.2  2003/03/05 15:15:00  klatt
# added matrix class
# modified code according to matrix_class interfaces
# changed program options and allow pipelining
#
# Revision 1.1  2003/02/27 19:11:46  schwarzd
# new file added (toolbox/get_overlap)
#
# Revision 1.5  2003/02/12 18:12:23  schwarzd
# creats disruption network
# CVSt: ----------------------------------------------------------------------
#
# Revision 1.4  2003/02/12 15:50:29  schwarzd
# added sigma
#
# Revision 1.3  2003/02/12 15:28:11  schwarzd
# mutant_transsys now reconstructs network
#
# Revision 1.2  2003/02/05 14:56:12  kim
# modified many things...
#
"""GET_OVERLAP is a Python script to build and analyze disruption networks.  The disruption network is build from a given Transsys program by gradually knocking out one gene at a time and observing the changes in concentration of the products. With these measurements one can make assumptions about wether a gene is controlling a certain factor. After reconstructing various methods are applied in order to give a reasonable answer for the quality of the network.  Furthermore it is of interest to find out wether there is a reason to believe that reconstructing serves better results than just building a random network and comparing it to the original.
"""

import math
import os
import time
import getopt
import sys
import string
import re
import transsys
import transdisrupt






class Gamma :

  def __init__(self, gamma, num_nodes, overlap, recEdges, origEdges) :
    """Constructor.  The Gamma class provides a set of variables, that are useful for representing the quality of the reconstructed network based on the gamma. The variable gamma is a threshold (for more detailed information see disruption_network), overlap holds the number of edges that were reconstructed and are also present in the original network, whose total number of edges is kept in origEdges. recEdges represents the number of all reconstructed edges. furthermore sensitivity and specificity are calculated. These values are used to evaluate the quality of the distribution network.
    """
    self.gamma = gamma
    self.correctEdges = overlap
    self.origEdges = origEdges
    self.recEdges = recEdges
    self.num_nodes = num_nodes
    # when (reconstructed) network has no edges then we have to catch the division by zero
    try :
      self.sensitivity = float(self.correctEdges) / float(self.origEdges)
    except ZeroDivisionError :
      # when correctEdges is also zero...
      errlogger.message('sens_error: division by zero',0)
      if (self.correctEdges == 0) :
        self.sensitivity = 1.0
        errlogger.message('sens_error: correctRecEdges is zero -> sens set to 1',errorlogger_verbositylevel)        
      else :
        self.sensitivity = 0.0
        errlogger.message('sens_error: correctRecEdges is not zero -> sens set to 0',errorlogger_verbositylevel)
      if self.sensitivity < 0.0:
        errlogger.message('sens_error: value below zero',0)
      elif self.sensitivity > 1.0:
        errlogger.message('sens_error: value above one',0)        
    try :
      # spec = incorrect rec egdes / all incorrect  edges
      # explain exception handling
      self.specificity = 1.0 - ((float(self.recEdges) - float(self.correctEdges)) / (float(self.num_nodes * self.num_nodes) - float(self.origEdges)))
    except ZeroDivisionError :
      self.specificity = 0.0
      errlogger.message('spec_error: division by zero',0)
    if self.specificity < 0.0:
      errlogger.message('spec_error: value below zero',0)
    elif self.specificity > 1.0:
      errlogger.message('spec_error: value above one',0)

      

  def __str__(self) :
    """returns a string containing values of all membervariables:
    gamma, number of nodes, origEdges, correctEdges, recEdges, sensitivity, specifity, rel_quality
    """
    s = str(self.gamma) + " " + str(self.num_nodes)  + " " + str(self.origEdges)  + " " + str(self.correctEdges) + " " + str(self.recEdges) + " " + str(self.sensitivity) + " " + str(self.specificity) + " " + str(self.rel_quality()) + '\n'
    return s
    
  def rel_quality(self):
    """returns the distance of the point (sens,spec) from (1.0, 1.0) in a cartesian coordinate.  The smaller the distance gets, the better is the reconstruction. spec=1.0 and sens=1.0 would be exactly the original network.
    """
    rel_quality =  math.sqrt((1.0-self.sensitivity)**2 + (1.0-self.specificity)**2)
    return rel_quality


def quality_sort(g1, g2) :
  """Definition for sorting Gammas by there rel_quality. When mulitple gammas are tried they can be sorted from best to worst, according to the specificity and sensivity of the given reconstructed network.
  """
  if g1.rel_quality() < g2.rel_quality() :
    return -1
  elif g1.rel_quality() > g2.rel_quality() :
    return 1
  else :
    return 0





class DisruptionControlParameters :
  """docu missing
  """

  savefile_magic = 'DisruptionControlParameters-1.0'

  # instantiate controlparameters by file
  def __init__(self, control_parameter_file) :
    self.parse (control_parameter_file)
    
   # self.random_seed = 
   # self.
   # self.topology = None
   # self.constitutive = CyclicSequence([0.0])
   # self.km_activation = CyclicSequence([0.0])
   # self.km_repression = CyclicSequence([0.0])
   # self.vmax_activation = CyclicSequence([0.0])
   # self.vmax_repression = CyclicSequence([0.0])
   # self.decay = CyclicSequence([0.0])
   # self.diffusibility = CyclicSequence([0.0])


  def __str__(self) :

    s = ""
    #for g in build string from sigma here...
    
    # if it is desired to have both the parameters for original transsysprogram and
    # controlparameters for reconstruction it would be possible to concatenate those
    # after running a simluation.
    
    # controlparameters for reconstruction
    s = s + 'timesteps_ref: %s\n' % str(self.timesteps_ref)
      # at the moment timesteps_ko is absent
    #s = s + 'timesteps_ko: %s\n' % str(timesteps_ko)
    #s = s + 'sigma: %s\n' % sigma_string
    s = s + 'rec_constitutive: %s\n' % str(self.constit)
    s = s + 'rec_a_spec: %s\n' % str(self.a_spec)
    s = s + 'rec_a_max: %s\n' % str(self.a_max)
    #s = s + 'rec_r_spec: %s\n' % str(self.r_spec)
    #s = s + 'rec_r_max: %s\n' % str(self.r_max)
    s = s + 'rec_decay: %s\n' % str(self.decay)
    # for scoreMatrix
    s = s + 'no_connection_defaultvalue: %s\n' % str(self.no_connection_defaultvalue)
    s = s + 'gamma: %s\n' % str(self.gamma)
      # no such thing yet!
    #s = s + 'gamma_lb: %s\n' % str(self.gamma_lb)
    #s = s + 'gamma_delta: %s\n' % str(self.gamma_delta)
    #s = s + 'gamma_ub: %s\n' % str(self.gamma_ub)
    return s


  def write(self, f) :
    """write controlParamters to file f
    """

    f.write('%s\n' % self.savefile_magic)
    f.write(str(self))
    f.write('\n')


  def parse(self, f) :
    """set parameter members by parsing from file f. This should work with files
    generated by the write() method, but of course, files can also be manually written.
  
    Notes on the format: The format is of the simple <identifier>: <value> type.
    All parameters must be specified in the order in which they are written by the
    write() method. Permuting this order was deliberately not permitted because
    that would make it more easy to omit parameters, and more difficult to check
    against this. Incomplete specifications are considered dangerous because
    unspecified parameters may end up in unclear defaults or even undefined states,
    so it's best to require explicit specification of all parameters.
    """

    def parse_int(f, label) :
      r = '%s\\s*:\\s*([0-9]+)' % label
      line = f.readline()
      m = re.match(r, line.strip())
      if m is None :
        raise StandardError, 'RandomTranssysParameters::parse: failed to obtain int "%s" in "%s"' % (label, line.strip())
      return int(m.group(1))

    def parse_float(f, label) :
      r = '%s\\s*:\\s*([+-]?([0-9]+(\\.[0-9]+)?)|(\\.[0-9]+)([Ee][+-]?[0-9]+)?)' % label
      line = f.readline()
      m = re.match(r, line.strip())
      if m is None :
        raise StandardError, 'RandomTranssysParameters::parse: failed to obtain float "%s" in "%s"' % (label, line.strip())
      return float(m.group(1))

#    def parse_cyclicseq(f, label) :
#      r = '%s\\s*:\\s*(.*)' % label
#      line = f.readline()
#      m = re.match(r, line.strip())
#      if m is None :
#        raise StandardError, 'RandomTranssysParameters::parse: failed to obtain CyclicSequence "%s"' % (label, line.strip())
#      c = CyclicSequence([0.0])
#      c.from_string(m.group(1))
#      return c


    line = f.readline()
    if string.strip(line) != self.savefile_magic :
      raise StandardError, 'RandomTranssysParameters::parse: bad magic "%s"' % string.strip(line)

    self.timesteps_ref = parse_int(f, 'timesteps_ref')
    # not yet implemented
    #self.sigma = parse_float(f, 'constitutive')
    self.constit = parse_float(f, 'constitutive')
    self.a_spec = parse_float(f, 'a_spec')
    self.a_max = parse_float(f, 'a_max')
    self.r_spec = parse_float(f, 'r_spec')
    self.r_max = parse_float(f, 'r_max')
    self.decay = parse_float(f, 'decay')
    #self.no_connection_defaultvalue = parse_int(f, 'no_connection_defaultvalue')
    #self.gamma = parse_float(f, 'gamma')    
    # no such thing yet!
    #self.gamma_lb = parse_float(f, 'gamma_lb')
    #self.gamma_delta = parse_float(f, 'gamma_delta')
    #self.gamma_ub = parse_float(f, 'gamma_ub')    

    line = f.readline()
    if line.strip() != '' :
      raise StandardError, 'RandomTranssysParameters::parse: trailing garbage line "%s"' % line.strip()

  def write_parameter_comments(self, f) :
    for s in str(self).split('\n') :
      f.write('// %s\n' % s)







# FIXME: maybe add possibilty to pass a comparison function. that way all kinds of different objects could be used.
def distribution(set, epsilon, gamma, num_genes, basename = None, specific = ''):
  """docu missing
  """
  if specific != '' :
    specific = '_' + specific
  if ((set is None) or (len(set) == 0)) :
    raise StandardError, "get_overlap::plot_distribution: got no data"
  else:
    if ((type(set[0]) == types.FloatType) or (type(set[0]) == types.IntType) or (type(set[0]) == types.LongType)):
      dis_list=[]
      set.sort()
      for element in set :
        range_count = 0
        # find all elements that are within [element-epsilon, element+epsilon]
        for e in set :
          if ((element-epsilon <= e) and (e <= element+epsilon)) :
            range_count = range_count + 1
          elif (e > element+epsilon) :
            break
       
        dis_list.append((element,range_count))
      # print table
      if basename is not None :
        f = open('%s_distribution%s.plt' % (basename, specific), 'w')
        f.write('#factor_concentration  frequency\n')
        for e in dis_list :
          # comment out |values| below gamma
          if math.fabs(float(e[0])) < gamma :
            format_inout = '#%f  %d  %f\n'
          else :
            format_inout = '%f  %d  %f\n'
          # FIXME: if num_genes is 0 then don't write 3rd argument!!!
          f.write(format_inout % (float(e[0]), e[1], float(e[1])/float(num_genes)))

      return dis_list

    else :
      raise StandardError, 'get_overlap::plot_distribution: cannot work with %s' % str(type(set[0]))



def printTime (str) :
  t = time.strftime("%H:%M:%S", time.localtime())
  print str + ' (' + t + ')'
  

def disruption_network (network, gamma, sigma, timesteps, decay_rate, a_spec, a_max, constit, basename = None):
  """Initializes the reconstruction of a network.  At the moment the following data will be written to disk: The TranssysProgram for the Disruption Network, '.dot'-files for the Disruption Network and the Original, .....
"""
  # instantiate dot-parameters
  global_dotParams = transsys.DotParameters()
  global_dotParams.display_factors=0                 #hide factors

  # instantiate KnockoutTranssysProgram
  knockout_network = transdisrupt.KnockoutTranssysProgram(network)

  # get the reusable matrices (and at some point ref_conc_matrix migth be an anrray)

  # set up a list if reference concentrations where a single entry corresponds to a certain factor. at the
  # moment the "list" is a matrix (n times the same column).
  ref_conc_matrix = transdisrupt.referencestate_concentration_matrix(network, timesteps)
  
  # knock out each gene once and run a transsyssimulation. write the possibly altered concentration of all factors to the conc_matrix.
  # each row/column??? corresponds to one timeseries.
  conc_matrix = transdisrupt.knockout_concentration_matrix(knockout_network, ref_conc_matrix, timesteps)

  # calculate the logratios as follows log(conc_matrix[i,j] / ref_conc_matrix[i,j]). negative entries would mean
  # upregulation by knockout gene in that timeseries and positive values vice versa.
  matrix_E = transdisrupt.logratio_matrix(ref_conc_matrix, conc_matrix, sigma)
  

  # calculate adjacency matrix for the original network. it is used for determine the overlap
  # of the given and the reconstructed network. these values are needed for sensitivity and specificity
  # calculation.
  adj_matrix = transdisrupt.adjacency_matrix(network)

  pathscoreMatrix = transdisrupt.pathscore_matrix(network, transdisrupt.link_scorefunc, network.num_genes()+1)

  matrix_D = transdisrupt.reconstructed_adjacency_matrix(matrix_E, gamma, sigma)

  disruption_network = transdisrupt.create_disruption_network(network.name + '_dn', matrix_D, matrix_D.get_gnamelist(), decay_rate, a_spec, a_max, constit)

  #calculate overlap of original network and disruption network
  #return integer representing the number of correct edges, edges only in origNetw, edges only in disNetw
  overlap = transdisrupt.overlaps(network, disruption_network)

  edges_in_Orig_and_Rec = len(overlap[0])
  edges_only_in_Orig = len(overlap[1])
  edges_only_in_Rec = len(overlap[2])

  gamma_c = Gamma(gamma, network.num_genes(), edges_in_Orig_and_Rec, edges_in_Orig_and_Rec + edges_only_in_Rec, edges_in_Orig_and_Rec + edges_only_in_Orig )
  if basename is not None :
    # print transsys-program code for orig_network and disruption_network
    open('%s_dn.tra' % basename, 'w').write(str(disruption_network))
    open('%s_orig.tra' % basename, 'w').write(str(network))

    # set dot_parameters for edges
    disruption_network.write_dot(open('%s_dn.dot' % basename, 'w'), global_dotParams)
    network.write_dot(open('%s_orig.dot' % basename, 'w'), global_dotParams)

    # write out collected data
    #print "hallo datatable\n%s\n" % basename
    write_datatable(basename + '_datatable.plt', [adj_matrix, matrix_E, matrix_D, ref_conc_matrix, conc_matrix, pathscoreMatrix])

    write_gene_info(adj_matrix, ref_conc_matrix, basename + '_orig')
    write_gene_info(transdisrupt.adjacency_matrix(disruption_network), ref_conc_matrix, basename + '_dn')

    # flush files
    f = open('%s_gamma.plt' % basename, 'w')
    f.write('#gamma nodes origEdges correctRecEdges allRecEdges sens spec relQality\n')
    f.write(str(gamma_c))
  #else :
    #print 'no output'
    # the only output, when no basename is given so it is possible to pipe it somewhere...
    #sys.stdout.write(str(disruption_network))

  #pathscoreMatrix.gnu_comparison(matrix_D, transdisrupt.uniform_cmp)

  #PROGRAM TERMINATES HERE WHEN EVERYTHING WENT ALLRIGHT
  if errlogger.errors > 0:
    sys.stderr.write('%d error(s) occured, see %s\n' % (errlogger.errors, errlogger.errorfilename))
  errlogger.errors = 0

  f.close()
  
  return disruption_network








def write_gene_info(adjacency_matrix, ref_conc_matrix, basename):
  f = open('%s_geneinfo.plt' % basename, 'w')
  f.write('#  timesteps for reference state: %d\n' % (timesteps) )
  f.write('\n')
  f.write('#  1: indegree\n')
  f.write('#  2: indegree_activate\n')
  f.write('#  3: indegree_repress\n')
  f.write('#  4: outdegree\n')
  f.write('#  5: outdegree_activate\n')
  f.write('#  6: outdegree_repress\n')
  f.write('#  7: reference_concentration\n')
  for factor_i in adjacency_matrix.get_fnamelist():
    indegree_activate = 0
    indegree_repress = 0
    outdegree_activate = 0
    outdegree_repress = 0
    for factor_j in adjacency_matrix.get_fnamelist():
      x = adjacency_matrix.get_element(factor_j, factor_i)
      if x < 0 :
        indegree_activate = indegree_activate + 1
      elif x > 0 :
        indegree_repress = indegree_repress + 1
      x = adjacency_matrix.get_element(factor_i, factor_j)
      if x < 0 :
        outdegree_activate = outdegree_activate + 1
      elif x > 0 :
        outdegree_repress = outdegree_repress + 1
    f.write('# %s\n' % factor_i)
    # FIXME: sigma might be added later on
    f.write('%d  %d  %d  %d  %d  %d %f \n' % (indegree_activate + indegree_repress, indegree_activate, indegree_repress, outdegree_activate + outdegree_repress, outdegree_activate, outdegree_repress, ref_conc_matrix.get_element(factor_j, factor_i) ))
  f.close()







def write_datatable(datatable_filename, matrix_list) :
  """docu missing
  """
  f = open(datatable_filename, 'w')
  f.write('#  1: counter\n')
  for i in xrange(len(matrix_list)) :
    f.write('# %2d: %s\n' % (i + 2, matrix_list[i].name))
  counter = 0
  if len(matrix_list) == 0 :
    raise StandardError, 'write_datatable: no matrices to write'
  factor_list = matrix_list[0].get_fnamelist()
  for factor_i in factor_list :
    for factor_j in factor_list :
      counter = counter + 1
      fi=factor_i
      fj=factor_j
      f.write('# %s  %s\n' % (fi, fj))
      f.write('%d' % counter)
      for m in matrix_list :
        if isinstance(m.get_element(fi, fj), float) :
          f.write(' %1.12e' % float(m.get_element(fi, fj)))
        elif isinstance(m.get_element(fi, fj), int) :
          f.write(' %1.12e' % float(m.get_element(fi, fj)))
        else :
          raise StandardError, "write_datatable:: unknown datatype %s" % m.get_element(fi, fj).__class__.__name__
      f.write('\n')
  f.close()
  







def write_gnuplot_commandfile(basename, filename, col_list):
  """writes a gnuplotcommandfile. when executed it will plot 21 scatter plots...
  """
  length_col_list=len(col_list)
  if length_col_list>0 :
    c=0
    f = open('%s.gpc' % basename, 'w')
    for column1 in xrange(length_col_list) :
      for column2 in xrange(length_col_list-(column1+1)):
        c=c+1
        f.write('set xlabel "%s"\n' % (col_list[column1]))
        f.write('set ylabel "%s"\n' % (col_list[column1+column2+1]))
        f.write('plot "%s" using %d:%d title "%s<->%s" with points pt 13\n' % (filename, column1+1, column1+column2+2, col_list[column1], col_list[column2+column1+1] ))
        f.write('pause -1 " [%d/%d] press return for next plot..."\n' % (c, (length_col_list-1)*(length_col_list)/2))
    f.close()
  else :
    raise StandardError, "get_overlap::write_gnuplot_commandfile: no columns specified"






def usage() :
  """print commandline options
  """
  print 'get_overlap -- make disruption_network and run several evaluation attempts. uses a transsys programs for input.'
  print 'usage: get_overlap [options] <TranssysProgram>'
  print 'options:'
  print '-o <filename>: basename for all output files'
  print '-p: writes gnuplot commandfile'
  print '-g <float>: specify gammas (default is 0.2)'
  print '-h: print this help and exit'





# print controlparameter that are used in this script
def print_controlparameter() :
  """missing docu
  """
  print ''
  print 'timesteps'
  print 'sigma (list)'
  print 'a_spec'
  print 'a_max'
  print 'decay_rate'
  print 'constit'
  print 'co_connection_default_value (n+1)'
  print 'default_gamma (0.2)'
  print 'default_sigma (1.0)'
  print ''





########
##MAIN##
########
options, args = getopt.getopt(sys.argv[1:], 'C:g:o:hp:c')
# control parameters
gamma=None
default_gamma=0.2
basename = None
default_sigma = 1.0
timesteps = 300
decay_rate = 0.1
a_spec = 1.0
a_max = 1.0
constit = 0.0
# sigma = see below parsing input 
gnuplot_filename = None
errorlogger_verbositylevel=5
cp_file = ""



# parse commandline options
for opt in options :
  if opt[0] == '-h' :
    usage()
    sys.exit()
  if opt[0] == '-c' :
    print_controlparameter()
    sys.exit(0)
  elif opt[0] == '-C' :
    cp_file = open(opt[1], 'r')
  elif opt[0] == '-p' :
    gnuplot_filename = opt[1]
  elif opt[0] == '-g':
    gamma = float(opt[1])
  elif opt[0] == '-o':
    basename = opt[1]
  else :
    sys.stderr.write('unknown option %s\n' % opt[0])
    
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin


# parse input and set name of the transsysprogram
orig_Network_input = transsys.TranssysProgramParser(infile)
orig_Network = orig_Network_input.parse_transsys()
transsys_name = orig_Network.name



# errorLogger
if basename is None :
  errfilename = 'errlogger'
else :
  errfilename = basename
errlogger = transdisrupt.ErrorLogger(errfilename+'.errors', errorlogger_verbositylevel)

# DisruptionParameterFileParser
if not cp_file == "":
  dcp = DisruptionControlParameters (cp_file)

# gene-specific deviation estimate !!do NOT use sigma[i]==0, cos it's a denominator
sigma = {}
for fname in orig_Network.factor_names() :
  sigma[fname] = default_sigma

if gamma is None :
  gamma = default_gamma

# start reconstruction
disruption_network = disruption_network(orig_Network, gamma, sigma, timesteps, decay_rate, a_spec, a_max, constit, basename)

# write gnuplot command file when appropiate flag was set 
if gnuplot_filename is not None :
  write_gnuplot_commandfile(basename, gnuplot_filename, ['counter','adj_matrix','matrix_E','matrix_D','ref_conc_matrix','conc_matrix','scoreMatrix'])


#write_gene_info(adjacency_matrix(disruption_network), basename+'_disnet')
sys.exit(0)
