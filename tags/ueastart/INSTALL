Installation of the transsys software
=====================================

The package is generated with the standard GNU tools for packaging,
i.e. autoconf, automake etc, and installation is thus pretty standard.
If the command sequence

    ./configure
    make
    make install

seems familiar to you, you should not expect much trouble. If you are
not familiar with these, you may want to check out the generic instructions
in the section "Basic Installation" below.


Quick start
-----------

The following sequence of commands should reasonably safely install
the transsys software in your local account. Use them at your own risk,
though. The more you know what you're doing, the less is your risk... so,
refer to the information given in the rest of this file if you are more
cautious. And additionally, reading some man pages when in doubt will
likely be a good idea. Now, here's the recipe:

    PATH=${HOME}/bin:${PATH}
    R_LIBS=${HOME}/lib/R
    export R_LIBS
    mkdir -p ${R_LIBS}
    PYTHONPATH=${HOME}/lib/python
    export PYTHONPATH
    mkdir -p ${PYTHONPATH}
    tar -zxvf transsys-<version>.tar.gz
    cd transsys-<version>
    ./configure --prefix=$HOME
    make
    make install

If something fails, see the information on prerequisites and further
info given below.

After successfully running these commands, you should be ready to run the
transsys programs from the shell which you also used for installation.
When satisfied, you will probably add the modifications to your
environment to the appropriate startup scripts (i.e. ~/.bash_profile and
~/.bashrc, for instance).


Prerequisites
-------------

The transsys package is developed under Linux, but it should also be
possible to compile and install under other operating systems. Irix used
to work while I had access to a SGI workstation, installing on other
Unices should be reasonably easy -- depending on how reasonable the Unix
flavour is.

Please don't ask me about Windows or Mac OS, I am not familiar with these,
but I am all the more interested in installation reports (of both
successful and unsuccessful attempts).

Installation requires the following prerequisites

    * a reasonable C compiler, such as gcc
    * an OpenGL implementation, MesaGL works fine

Additional requirements for the toolbox are

    * the R system for statistical computing version 1.5.x or better
    * Python 2.x


Specific instructions & Caveats
-------------------------------

The basic transsys programs are coded in C and should compile without
trouble. The tools in the toolbox directory may give rise to some
difficulties, as these are subject to quite dynamic development. In
addition, the tools make use of Python and R, and their installation
does not adhere to the generic standards to the extent that the basic
C programs do.

The R installation is done by invoking the ``R CMD INSTALL'' command
with the R_LIBS environment variable set to $(prefix)/lib/R. This will
install the package in that directory. Thus, you must have sufficient
permissions for installing in the target directory, otherwise, the R
installation will fail. Additionally, there currently is no way to set
the R installation directory to something else. If you want to install
the R package somewhere else, set the R_LIBS variable accordingly and
run the command

    R CMD INSTALL transarr

in the toolbox directory.

The Python installation installs Python modules in $(prefix)/lib/python.
Thus, you must include this directory in your PYTHONPATH environment
variable. The python installation does not proceed through the standard
``python setup.py install'' mechanism because I don't know how to set
things up for that. Please feel free to educate me...


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
