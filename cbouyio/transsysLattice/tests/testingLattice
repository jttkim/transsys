#!/bin/sh

# $Rev::               $:  Revision of last commit
# $Author::            $:  Author of last commit
# $Date$:  Date of last commit

# Script to conduct several tests on the latticeSimulator python program.
# First developed by Cbouyio UEA 15/05/2006.

# Usage.
if test "$1" == "--help"  || test "$1" = "-h"  ;
then
  echo "Usage: $0  (the tests run without any option)"
  echo "Conducting a collection of tests to the latticeSimulator python program.
For more info about the tests check the source code."
  exit $?
fi

# Define the compulsory program options.
LATTICESIZE=10x10
TIMESTEPS=100


# The directory should contain some "xxxOut.expect" expected files and the 
# coresponding "xxxxTest.tra" transsys program files.

if test ! -f naiveTest.tra || test ! -f naiveOut.expect ;
then
  echo "Can't find the prerequisite naive testing files."
  exit $?
elif test ! -f zeroTest.tra || test ! -f zeroOut.expect ;
then
  echo "Can't find the prerequisite zero testing files."
  exit $?
elif test ! -f decayTest.tra || test ! -f decayOut.expect ;
then
  echo "Can't find the prerequisite decay testing files."
  exit $?
elif test ! -f sTimestepTest.tra || test ! -f sTimestepOut.expect ;
then
  echo "Can't find the prerequisite signal timestep testing files."
  exit $?
elif test ! -f sFactorTest.tra || test ! -f sFactorOut.expect ;
then
  echo "Can't find the prerequisite signal factor testing files."
  exit $?
elif test ! -f diffusionTest.tra || test ! -f diffusionOut.expect ;
then
  echo "Can't find the prerequisite diffusion testing files."
  exit $?
elif test ! -f diffusibilityTest.tra || test ! -f diffusibilityOut.expect ;
then
  echo "Can't find the prerequisite diffusibility testing files."
  exit $?
elif test ! -f  randomSeedTest.tra  ;
then
  echo "Can't find the prerequisite random seed testing files."
  exit $?
fi


####### Not used anymore, the script exit with an exit code upon any failure.
## Initialise some counters.
#failure=0
#success=0
#notests=0


# Test No 1: The naive base test for the latticeSimulator program.
# Run on a geneless transsys program with all the values set to zero and in
# zero timesteps and lattice size of 1.
if ! latticeSimulator -n 1x1 -t 0 naiveTest.tra naivetestTMP.out
then
  exit $?
else
  if ! diff naiveOut.expect naivetestTMP.out ;
  then
    echo "naive test: failed...((("
    echo "files naiveOut.expect naivetestTMP.out differ!"
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'test No 1: naive test: successful!'
  #  let success++
  let notests++
  fi
fi


# Test No 2: Zero test for the latticeSimulator program.
# Run on a geneless transsys program, with diffusibility and decay set to zero.
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS zeroTest.tra zerotestTMP.out
then
  exit $?
else
  if ! diff zeroOut.expect zerotestTMP.out ;
  then
    echo "zero test: failed...((("
    echo "files zeroOut.expect zerotestTMP.out differ!"
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'test No 2: zero test: successful!'
  #  let success++
  let notests++
  fi
fi


# Test no 3: Decay test for the latticeSimulator program.
# Testing the simulator -x option (concentration:timestep) & the exponential
# decay rate.
# Run on a geneless transsys program with zero diffusibility and decay rate=0.5
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -x 10:0 decayTest.tra decaytestTMP.out
then
  exit $?
else
  if ! diff decayOut.expect decaytestTMP.out ;
  then
    echo 'decay test: failed...((('
    echo 'files decayOut.expect decaytestTMP.out differ!'
    rm *TMP.out
    exit $?
  #  let failure++
  else
    echo 'test No 3: decay test: successful!'
  #  let success++
  let notests++
  fi
fi
# Conduct some further test with R, to check the exponential deacay rate.


# Test No 4: Test the signal timestep mechanism (-x).
# Run on an identical transsys program as the decay test but check of the
# correct placement of the signal.
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -x 10:10 sTimestepTest.tra sTimestepTMP.out
then
  exit $?
else
  if ! diff sTimestepOut.expect sTimestepTMP.out ;
  then
    echo "signal timestep test: failed...((("
    echo " files sTimestepOut.expect sTimestepTMP.out differ!"
    rm *TMP.out
    exit $?
#    let failure++
  else
    echo 'test No 4: signal timestep test: successful!'
#    let success++
  let notests++
  fi
fi


# Test No 5: Test the signal factor mechanism (-s).
# Tests the implementation of the signal factor concentration. This mechanisms
# intoduce the signal on a defined factor on the first (1, 1) cell of the
# lattice.
# The test runs on a more complicated transsys program with two genes encoding
# for two factors, one activator one repressor.
# The test runs using the signal mechanism, -s switcher by denoting a factor
# name and a factor concentration. (The rest of the parameters default)
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -s "FACTOR_A:1 FACTOR_B:0" sFactorTest.tra sFactorTestTMP.out
then
  exit $?
else
  if ! diff sFactorOut.expect sFactorTestTMP.out ;
  then
    echo "signal factor test: failed...((("
    echo "files sFactorOut.expect sFactorTestTMP.out!"
    rm *TMP.out
    exit $?
#    let failure++
  else
    echo "test No 5: signal factor test: successful!"
#    let success++
  let notests++
  fi
fi


# Test no 6: Diffusion test between the cells on the lattice.
# Run on a geneless transsys program of one factor with zero decay and
# diffusibility set to one (1.0).
# Checks if the diffusion procedure take place according to the expected.
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -s DIFFUSIONTEST_factor:20 diffusionTest.tra diffusionTestTMP.out
then
  exit $?
else
  if ! diff diffusionOut.expect diffusionTestTMP.out ;
  then
    echo "check diffusion test: failed...((("
    echo "files diffusionOut.expect diffusionTestTMP.out differ!"
    rm *TMP.out
    exit $?
#    let failure++
  else
    echo 'test No 6: check diffusion test: successful!'
#    let success++
  let notests++
  fi
fi
# Conduct some further tests with R, to check the 100% diffusion of the factor
# between the cells on the lattice.


# Test no 7: Diffusibility expressions test.
# Run on a two genes two factors transsys program, both have the same decay rate
# (0.50) and expressed constitutivelly, but both have different diffussion
# rates. Diffusibility rates have been set to the extreme accepted values zero
# (0.0) and one (1.0).
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS diffusibilityTest.tra diffusibilityTestTMP.out
then
  exit $?
else
  if ! diff diffusibilityOut.expect diffusibilityTestTMP.out ;
  then
    echo "diffusibility expression test: failed...((("
    echo "files diffusibilityOut.expect diffusibilityTestTMP.out differ!"
    rm *TMP.out
    exit $?
#    let failure++
  else
    echo 'test No 7: diffusibility expression test: successful!'
#    let success++
  let notests++
  fi
fi


# Test no 8: The random number generator test.
# In a more complex transsys program (two genes two factors fully conected)
# check whether or not the random seed produces different numbers.
# Run with the default random seed (1) then with a different one (2) and then
# without random seed (get the date), in all cases the outfiles should be
# different (last test hasn't yet implemented 23/01/2007).
if ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -u 0:1 randomSeedTest.tra randomSeed_1_TMP.out || ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -u 0:1 -r 2 randomSeedTest.tra randomSeed_2_TMP.out
then
  exit $?
#elif ! latticeSimulator -n $LATTICESIZE -t $TIMESTEPS -u 0:1 -r 0 randomSeedTest.tra randomSeed_0_TMP.out
#then
#  exit $?
else
  if cmp -s randomSeed_1_TMP.out randomSeed_2_TMP.out ;
  then
    echo "random number genetrator test: failed...((("
    echo "files randomSeed_1_TMP.out randomSeed_2_TMP.out are not different!"
    rm *TMP.out
    exit $?
#    let failure++
  else
    echo "test No 8: random number generator test: successful!"
#    let success++
  let notests++
  fi
fi


# Print the final message.
echo
rm *TMP.out
echo "All $notests tests run succefully... !!!"
#if [[ $failure = 0 ]] ; then
#  echo "all $success out of $notests tests run successfully!!!"
#else
#  echo "not all tests run succefully. $success out of $notests succeed and $failure out of $notests tests failed...!!!"
#fi

