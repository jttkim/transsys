#!/usr/bin/env python

# $Rev:: 245           $:  Revision of last commit
# $Author:: cbouyio    $:  Author of last commit
# $Date: 2007-01-05 20:39:38 +0000 (Fri, 05 Jan 2007) $:  Date of last commit


"""
latticeSimulator: Implement the simulation procedures on a lattice.

@author: Costas Bouyioukos
@email: konsb@cmp.uea.ac.uk
@organisation: University of East Anglia
@since: April 2006
@license: GNU General Public Lisence 2 or newer.
@contact: U{Costas Bouyioukos<mailto:konsb@cmp.uea.ac.uk>}
@version: $Id$
"""

# Version Information.
__version__ = "$Id$"


# latticeSimulator: A program that simulates a lattice of trannsys instances
# on a nxn lattice, each cell of the lattice cantains one transsys program.
# The program applies communication between neighbour cells and is an attempt
# to simulate the processes described in "Soile V. E. Keranen, 2004. Simulation
# study on effects of signaling network structure on the developmental
# increase in complexity."
# Start developing by CBouyio on Aprill 2006 at UEA
# Becomes an independent program at 11 September 2006

import getopt
import sys
import os
import os.path
import shutil
import re

import transsys.clib
import translattice
import transsys


def usage() :
  print """
Usage:
./latticeSimulator [options] arguments
  Options:
           -a: switch          Animation switch.
                               (Can be set only if -g has been specified.)
           -c: String          Specify the imaging factor.
                               (Mandatory if the -g has been specified.)
-f, --factors: switch          Print the factors' names and exit.
           -g: String          The .pgm framework switcher.
                               If it is set the .pgm production procedure will
                               be called and a specified directory will be
                               produced, containing all the image files.
   -h, --help:                 Prints this screen and exit.
           -i: Integet         Sampling interval.
           -m: Float           A maximum value of factor concentration that
                               will be represented at the .pgm image file.
                               (Mandatory if -g has been specified.)
                               The image color range is 0-256 gradients of grey.
           -n: IntegerxInteger The size of the nxm lattice.
                               (Mandatory)
           -p: String          Print in the specified file the summary
                               statistics of the simulation.
                               (Default: Print the factor table in the outfile)
           -q: String          Print in the specified file the pickle output of
                               the simulation (The Lattice Timeseries Object).
           -r: Integer         The random number generator seed.
                               (Default: 1)
           -s: String:Number   Signal switch, (FactorName:FactorConcentration)
                               Factor gets the defined concentration (signal) in
                               the beginning of the simulation (string:float).
           -t: Integer         The number of timesteps.
                               (Mandatory)
           -u: Number:Number   The range (a, b) of the borders of a uniform
                               distribution (floats).
           -x: Number:Integer  Signal switch, (FactorConcentration:Timestep)
                               All factors will get the defined concentration at
                               the defined timestep (float:integer).
  Arguments:
   <infile>: A valid transsys program (.tra) file. (<STDIN> if not specified)
  <outfile>: An output file. (<STDOUT> if not specified)"""


def os_manipulation(dir_name) :
  """
  Conduct directory checking and manipulation.
  """
  # First check for the existance of the directory.
  if os.path.exists(dir_name) :
    shutil.rmtree(dir_name)
  # Make a directory named .s user define and change to it.
  os.mkdir(dir_name)
  os.chdir(dir_name)


def pgm_framework(pgmDir, pgmFactor, maxConcentration, transLatticeTimeseries) :
  """
  Function to integrate the .pgm file production.
  """
  # Image file production and directory manipulation.
  # Use the os module to make a directory where all the image files will be
  # stored.
  os_manipulation(pgmDir)
  # Image file production.
  for i in xrange(len(transLatticeTimeseries)) :
  # Open the graphics file.
    filename = 'factor_%s_timestep%04d' % (pgmFactor, i) + '.pgm'
    figureFile = open(filename, 'w')
    # Produce the raster graphics files.
    translattice.generate_pgm(figureFile, transLatticeTimeseries[i], pgmFactor, maxConcentration)
    figureFile.close()
  # Return to the current directory.
  os.chdir(os.pardir)


def animate(pgmDir, pgmFactor) :
  """
  Produces the animated movie of the simulator.
  """
  # Change to the image directory.
  os.chdir(pgmDir)
  # Convert the images to a more readable size and produce the movie file.
  os.system('convert -sample 480x480 -delay 35 *.pgm ' + 'factor_%s_movie.mng' % pgmFactor)
  # Animate.
  os.system('animate *.mng &')
  # Return to the current directory.
  os.chdir(os.pardir)



####### Simulator's Parameter Initialization #################################
latticeSize      = None  # Dimension of the lattice.(-n ixj)
noTimesteps      = None  # Number of simulation timesteps.(-t)
randomSeed       = 1     # Random number generator seed.(-r)
samplingInterval = 1     # The sampling interval. (-i)
maxConcentration = None  # Maximum concentration allowed to be drawn.(-m)
signalTimestep   = None  # "signal" introduction at timestep.(-x)
signalFactor     = None  # Initiation "signal" of a factor.(-s)
animation        = False # Animation switch.(-a)
borderRange      = None  # Border range of the uniform distribution.(-u)
summaryFile      = None  # Filename of the summary statistics file.(-p)
pgmDir           = None  # pgm production framework directory.(-g)
pgmFactor        = None  # Factor name that will be used for the imaging.(-c)
transsysFactors  = False # Factor names switch.(-f, --factors) 
pickleFile       = None  # Pickle file name (-q).


## Command line parsing.
optlist, args = getopt.getopt(sys.argv[1:], 'ac:fg:hi:m:n:p:q:r:s:t:u:x:', ['help', 'factors'])

for opt, par in optlist :
  if opt in ('-h', '--help') :
    usage()
    sys.exit()
  if opt in ('-n') :
    x = re.compile('x')
    if x.search(par) :
      latticeSize = x.split(par)
      latticeSize = map(lambda x:int(x), latticeSize)
    else :
      raise StandardError, 'Error in the format of -n input options, please check the help (-h, --help) for more information'
    latticeSize = tuple(latticeSize)
  if opt in ('-t') :
    noTimesteps = int(par)
  if opt in ('-r') :
    randomSeed = int(par)
  if opt in ('-m') :
    maxConcentration = float(par)
  if opt in ('-x') :
    var = par.split(':')
    if len(var) != 2 :
      raise StandardError, 'Error in the format of -x input options, please check the help (-h, --help) for more information.'
    if float(var[0]) :
      signalTimestep = (float(var[0]), int(var[1]))
  if opt in ('-s') :
    var = par.split(':')
    if len(var) != 2 :
      raise StandardError, 'Error in the format of -s input options, please check the help (-h, --help) for more information.'
    if float(var[1]) :
      signalFactor = (var[0], float(var[1]))
  if opt in ('-a') :
    animation = True
  if opt in ('-p') :
    summaryFile = par
  if opt in ('-u') :
    var = par.split(':')
    if len(var) != 2 :
      raise StandardError, 'Error in the format of -u input options, please check the help (-h, --help) for more information.'
    if float(var[0]) < 0 or float(var[1]) <= 0 :
      raise StandardError, 'Factor concentrations can take only positive values, please specify a positive range.'
    borderRange = (float(var[0]), float(var[1]))
  if opt in ('-g') :
    pgmDir = par
  if opt in ('-f', '--factors'):
    transsysFactors = True
  if opt in ('-c') :
    pgmFactor = par
  if opt in ("-q") :
    pickleFile = par
  if opt in ("-i") :
    samplingInterval = int(par)


#print optlist
#sys.exit()


# Mandatory options checking.
if not transsysFactors :
  if not latticeSize :
    raise StandardError, '-n option mandatory. Specify a size for the lattice or give -h, --help for more information.'
  if noTimesteps is None :
    raise StandardError, '-t option mandatory. Specify number of timesteps or give -h, --help for more information.'
  if pgmDir :
    if maxConcentration is None :
      raise StandardError, '-m option mising, mandatory for the .pgm image file production. Specify maximum concentration or give -h, --help for more information.'
    if not pgmFactor :
      raise StandardError, '-c option mising, mandatory for the .pgm image file production. Specify a factor for imaging or give -h, --help for more information.'
  if animation :
    if not pgmDir :
      raise StandardError, '-g option mising, mandatory for the animation. Specify the .pgm files directory or give -h, --help for more information.'
else :
  if len(optlist) > 1 :
    raise StandardError, '--factors option only for printing factors, cannot used for a proper program running.'


## I/O manipulation.
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout



################
## Main program.
################

# Instantiate and parse the transsys program.
transsysProgram  = transsys.TranssysProgramParser(infile).parse()
# Close the input file.
if infile is not sys.stdin :
  infile.close()

# Print the transsys factors names (if asked).
if pgmFactor :
  if pgmFactor not in transsysProgram.factor_names() :
    raise StandardError, 'Factor %s does not belong to transsys program please choose one from the list: %s' % (pgmFactor, transsysProgram.factor_names())
if transsysFactors :
  for factorName in transsysProgram.factor_names() :
    outfile.write('%s\n' % factorName)
  sys.exit()



############################
# Main part of the simulator
############################

# Instantiate the lattice of transsys programs.
transInstanceLattice = translattice.TranssysInstanceLattice(transsysProgram, latticeSize)

# Initialise (or not) the factor concentrations on the lattice.
if borderRange :
  transInstanceLattice.initialise_lattice_concentrations(borderRange[0], borderRange[1], randomSeed)

# Introduce a signal by specifing a factor and the desired concentration.
if signalFactor :
  transInstanceLattice.signal_factor_concentration(signalFactor[0], signalFactor[1])

# Produce the timeseries.
# Before each invocation set the clib random seed.
transsys.clib.srandom(randomSeed)
transsysLatticeTimeseries = translattice.TranssysLatticeTimeseries(transInstanceLattice, noTimesteps, samplingInterval, signalTimestep)

# Print the factor table to the output file.
# First write the comments and the header.
transInstanceLattice.write_table_header(outfile, randomSeed)
# Then write the whole stuff.
transsysLatticeTimeseries.write_factor_table(outfile)

# Print the summary statistics to a user specified file.
if summaryFile :
  fileObj = open(summaryFile, "w")
  translattice.print_summary_statistics(transsysLatticeTimeseries.latticeTimeseries, fileObj)
  fileObj.close()

# The image files production framework.
if pgmDir :
  pgm_framework(pgmDir, pgmFactor, maxConcentration, transsysLatticeTimeseries.latticeTimeseries)

# Print the pickle file
if pickleFile :
  pickleFileObj = open(pickleFile, "w")
  pickleFileObj.write(translattice.pickle(transInstanceLattice))
  pickleFileObj.close()

# Image file conversion and animation.
if animation :
  animate(pgmDir, pgmFactor)

# Close output file and exit.
if outfile is not sys.stdout :
  outfile.close()

sys.exit()

