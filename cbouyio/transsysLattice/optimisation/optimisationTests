#!/usr/bin/env python

# A unit testing framework for the transsys lattice module.
# adapted and evolved from the testlattice shell script.

import unittest
import sys
import os
import filecmp

import transsys
import transsys.clib
import translattice
import randomLocalSearch

class TestRandomWalkOptimisation(unittest.TestCase) :

  def setUp(self) :
    self.tpOptTest = """transsys testOptimisation

# A transsys program to test the optimisation procedure.

{
  factor A
  {
    decay: 0.1;
    diffusibility: 0.01;
  }

  factor I
  {
    decay: 0.1;
    diffusibility: 1.0;
  }

  gene gene_a
  {
    promoter
    {
      A: activate(0.5, 3);
      I: repress(0.5, 2.15);
    }
    product
    {
      default: A;
    }
  }

  gene gene_i
  {
    promoter
    {
      A: activate(0.5, 3);
    }
    product
    {
      default: I;
    }
  }
}
"""

    self.dummyExpect = """transsys engineered
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.01 + ((0.09 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.01 + ((0.14 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: B;
    }
  }
}
"""


    self.CPExpected = """#randomSeed: 8888
#initialisationVariables: upper: 15.0 lower: 0.0 
#factorInitialisation: None
#signalTimestep: None
#latticeSize: width: 8 height: 8 
#samplingInterval: 1
#timesteps: 300
#rndParam: 8888
#cycles: 3
#offset: 0.1
#decayA: 0.01
#decayB: 0.01
#lowPoint: y: 1.0 x: 1.0 
#diffusibilityA: 0.0
#diffusibilityB: 0.002
#circle: r: 2.0 centre: y: 10.0 x: 10.0  
#highPoint: y: 14.0 x: 9.0 
"""


    self.dummyPerturbExpect = """transsys engineeredPerturbed
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.010154353242 + ((0.0900445961038 - 0.010154353242) * ((((A - 10.2948743363) * (A - 10.2948743363)) + ((B - 10.5609224881) * (B - 10.5609224881))) <= (2.17668707745 * 2.17668707745))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.00966108169214 + ((0.134987507817 - 0.00966108169214) * ((((A - 10.2948743363) * (A - 10.2948743363)) + ((B - 10.5609224881) * (B - 10.5609224881))) <= (2.17668707745 * 2.17668707745))));
    }
    product
    {
      default: B;
    }
  }
}
"""


    self.transsysOutExpected = """#randomSeed: 8888
#initialisationVariables: upper: 15.0 lower: 0.0 
#factorInitialisation: None
#signalTimestep: None
#latticeSize: width: 8 height: 8 
#samplingInterval: 1
#timesteps: 300
#rndParam: 8888
#cycles: 3
#offset: 0.1
transsys tpAlternative1
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.0104403554271 + ((0.0869279566482 - 0.0104403554271) * ((((A - 10.2330209785) * (A - 10.2330209785)) + ((B - 10.1314778074) * (B - 10.1314778074))) <= (1.98420289839 * 1.98420289839))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.00915297310675 + ((0.135583818859 - 0.00915297310675) * ((((A - 10.2330209785) * (A - 10.2330209785)) + ((B - 10.1314778074) * (B - 10.1314778074))) <= (1.98420289839 * 1.98420289839))));
    }
    product
    {
      default: B;
    }
  }
}

transsys currentBest8889
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.01 + ((0.09 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.01 + ((0.14 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: B;
    }
  }
}

transsys tpAlternative2
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.0106030901464 + ((0.0941509986927 - 0.0106030901464) * ((((A - 9.4070064961) * (A - 9.4070064961)) + ((B - 10.5947339918) * (B - 10.5947339918))) <= (2.1421337145 * 2.1421337145))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.0102465438991 + ((0.134191408428 - 0.0102465438991) * ((((A - 9.4070064961) * (A - 9.4070064961)) + ((B - 10.5947339918) * (B - 10.5947339918))) <= (2.1421337145 * 2.1421337145))));
    }
    product
    {
      default: B;
    }
  }
}

transsys currentBest8890
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.01 + ((0.09 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.01 + ((0.14 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: B;
    }
  }
}

transsys tpAlternative3
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.00975464564769 + ((0.0835676947009 - 0.00975464564769) * ((((A - 10.098064457) * (A - 10.098064457)) + ((B - 10.0507485825) * (B - 10.0507485825))) <= (2.00871159354 * 2.00871159354))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.00996750254429 + ((0.135629565597 - 0.00996750254429) * ((((A - 10.098064457) * (A - 10.098064457)) + ((B - 10.0507485825) * (B - 10.0507485825))) <= (2.00871159354 * 2.00871159354))));
    }
    product
    {
      default: B;
    }
  }
}

transsys currentBest8891
{
  factor A
  {
    decay: 0.01;
    diffusibility: 0.0;
  }

  factor B
  {
    decay: 0.01;
    diffusibility: 0.002;
  }

  gene geneA
  {
    promoter
    {
      constitutive: (0.01 + ((0.09 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: A;
    }
  }

  gene geneB
  {
    promoter
    {
      constitutive: (0.01 + ((0.14 - 0.01) * ((((A - 10.0) * (A - 10.0)) + ((B - 10.0) * (B - 10.0))) <= (2.0 * 2.0))));
    }
    product
    {
      default: B;
    }
  }
}

"""


    self.numericalOutExpected = """#randomSeed: 8888
#initialisationVariables: upper: 15.0 lower: 0.0 
#factorInitialisation: None
#signalTimestep: None
#latticeSize: width: 8 height: 8 
#samplingInterval: 1
#timesteps: 300
#rndParam: 8888
#cycles: 3
#offset: 0.1
OptCycle	RNGSeed	OptFlag	AltObj	AltLatBM	AltCtrlBM	BestObj	BestLatBM	BestCtrlBM	AltLowX	AltLowY	AltHighX	AltHighY	AltCircX	AltCircY	AltRadius	BestLowX	BestLowY	BestHighX	BestHighY	BestCircX	BestCircY	BestRadius	LatBest_muA	LatBest_stdevA	LatBest_muB	LatBest_stdevB
1	8889	FALSE	23.088428	29.101952	6.013524	26.388029	32.266972	5.878943	1.044036	0.915297	8.692796	13.558382	10.233021	10.131478	1.984203	1.000000	1.000000	9.000000	14.000000	10.000000	10.000000	2.000000	2.627016	2.973799	3.452365	3.011705
2	8890	FALSE	-32.770715	37.700591	70.471306	32.523593	37.591200	5.067606	1.060309	1.024654	9.415100	13.419141	9.407006	10.594734	2.142134	1.000000	1.000000	9.000000	14.000000	10.000000	10.000000	2.000000	2.519210	2.871097	3.234877	2.762388
3	8891	FALSE	8.417009	16.554404	8.137395	25.623587	34.064923	8.441336	0.975465	0.996750	8.356769	13.562957	10.098064	10.050749	2.008712	1.000000	1.000000	9.000000	14.000000	10.000000	10.000000	2.000000	2.343329	2.756300	3.028270	2.839253
"""


    self.optimisationParameters = randomLocalSearch.OptimisationControlParameters(3, 0.1, 8888)


    self.simulatorParameters = translattice.SimulatorControlParameters(translattice.LatticeSize(8, 8), 300, translattice.UniformParameters(0.0, 15.0), randomSeed = self.optimisationParameters.rndParam)


    self.engParameters = randomLocalSearch.EngineeringParameters(randomLocalSearch.Point(1, 1), randomLocalSearch.Point(9, 14), randomLocalSearch.Circle(randomLocalSearch.Point(10, 10), 2), 0.01, 0.0, 0.01, 0.002)


  # Tests Implementation

  def testEngineeredGeneration(self) :
    """Test to check weather the engineered transsys program is the same with the expected."""
    tpDummy = randomLocalSearch.TranssysProgramDummy('engineered', self.engParameters)
    self.assertEqual(self.dummyExpect, str(tpDummy))


  def testPerturbation(self) :
    """Test weather the perturbation function produces the expected perturbed transsys program.
    """
    perturbObj = translattice.UniformRNG(self.optimisationParameters.rndParam, -self.optimisationParameters.
        offset, self.optimisationParameters.offset)
    perturbedEngParameters = self.engParameters.perturb_eng_parameters(perturbObj)
    tpDummyPerturb = randomLocalSearch.TranssysProgramDummy('engineeredPerturbed', perturbedEngParameters)
    self.assertEqual(self.dummyPerturbExpect, str(tpDummyPerturb))


  def testControlParameters(self) :
    """Test to see whether the optimisation and the simulator control parameters are set properly.

    """
    self.assertEqual(self.CPExpected, str(self.simulatorParameters) + str(self.optimisationParameters) + str(self.engParameters))



  def testOptimisationFunctionDummy(self) :
    """Test whether the optimisation function returns the expeceted results (TranssysProgramDummy).

    Actually the optimiser runs on the engineered parameter set, that is what is getting optimised.
    """
    transOut = open('abcdefghij.tra', 'w')
    numericalOut = open('abcdefghij.dat', 'w')
    log = randomLocalSearch.OptimisationBookKeeping(self.simulatorParameters, self.optimisationParameters, transOut, numericalOut)
    randomLocalSearch.optimisation(self.engParameters, self.simulatorParameters, self.optimisationParameters, log)
    transOut.close()
    numericalOut.close()
    transOut = open('abcdefghij.tra', 'r')
    numricalOut =  open('abcdefghij.dat', 'r')
    transsysOptOut = transOut.read()
    numericalOptOut = numricalOut.read()
    os.unlink('abcdefghij.tra')
    os.unlink('abcdefghij.dat')
    self.assertEqual(self.transsysOutExpected, transsysOptOut)
    self.assertEqual(self.numericalOutExpected, numericalOptOut)


#  def testOptimisationfunctionTp(self) :
#    """Test whether the optimisation function returns the expeceted results (TranssysProgram).
#
#    Run on a transsys program object.
#    """
#    f = open('abcdefghij.tra', 'w')
#    f.write('%s\n' % self.tpOptTest)
#    f.close()
#    tp = transsys.TranssysProgramParser(open('abcdefghij.tra', 'r')).parse()
#    os.unlink('abcdefghij.tra')
#    output = randomLocalSearch.OptimisationBookKeeping()
#    randomLocalSearch.transsys_lattice_optimisation(tp, self.simulatorParameters, self.optimisationParameters, output)
#    self.assertEqual(self.OptFunctionTPExpect, output.print_all())

# Run the tests.
suite = unittest.TestSuite()
suite.addTest(unittest.makeSuite(TestRandomWalkOptimisation))
result = unittest.TextTestRunner(verbosity = 2).run(suite)

