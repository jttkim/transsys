#!/usr/bin/env python

"""
latticeSimulator: A program to conduct simulation studies on a lattice.
"""

# latticeSimulator: A program that simulates a lattice of trannsys instances
# on a nxn lattice, each cell of the lattice cantains one transsys program.
# The program applies communication between neighbour cells and is an attempt
# to simulate the processes described in "Soile V. E. Keranen, 2004. Simulation
# study on effects of signaling network structure on the developmental
# increase in complexity."
# Start developing by CBouyio on Aprill 2006 at UEA
# Becomes an independent program at 11 September 2006

import getopt
import sys
import os
import os.path
import shutil
import re


import translattice
import transsys


def usage() :
  print """
Usage:
./latticeSimulator [options] arguments
  Options:
          -a: switch        Animation switch.
  -h, --help:               Prints this screen and exit.
          -n: NumberxNumber The size of the nxm lattice.
                            (Default: 5x5)
          -p: filename      Print in the specified file the summary statistics
                            of the simulation.
                            (Default: Print the factor table in the outfile)
          -r: Integer       The random number generator seed.
                            (Default: 1)
          -s: String:Number Signal switch, (FactorName:FactorConcentration)
                            Factor gets the defined concentration (signal) in
                            the beginning of the simulation.
          -t: Integer       The number of timesteps.
                            (Default: 30)
          -u: Float         The range (0, [b]) of the borders of a uniform
                            distribution.
          -x: Number:Number Signal switch, (FactorConcentration:Timestep)
                            All factors will get the defined concentration at
                            the defined timestep.

  Arguments:
     <infile>: A valid transsys program (.tra) file. (<STDIN> if not specified)
    <outfile>: An output file. (<STDOUT> if not specified)
"""


def os_manipulation(tpname) :
  """
  Function to conduct the file and the out data storage directory manipulation.
  """
  # First check for the existance of the directory.
  if os.path.exists(tpname) :
    shutil.rmtree(tpname)
  # Make a directory named from the transsys program name, and change to it.
  os.mkdir(tpname)
  os.chdir(tpname)


def printing(statList, sumFileObj) :
  """
  Print the summary file.
  """
  sumFileObj.write('# Statistics file for testing and further analysis (Header).\n')
  sumFileObj.write('timestep:\tfactor:\taverage:\tstddev:\tentropy:\n')
  for i, stat in enumerate(statList) :
    for f in stat.transsys_program.factor_list :
      sumFileObj.write('%i\t%s\t%f\t%e\t%e\n' % (i, f.name, stat.average[stat.transsys_program.find_factor_index(f.name)], stat.standard_deviation[stat.transsys_program.find_factor_index(f.name)], stat.shannon_entropy[stat.transsys_program.find_factor_index(f.name)]))
  sumFileObj.close()


def animating() :
  """
  Produces the animated movie of the simulator.
  """
  # Convert the images to a more readable size and produce the movie file.
  os.system('convert -sample 480x480 -delay 35 *.pgm ' + transsysProgram.name + 'Movie.mng')
  # Animate.
  os.system('animate *.mng &')
  # Return to the current directory.
  os.chdir(os.pardir)



####### Simulator's Parameter Initialization #################################
latticeSize      = [5, 5] # The dimensions of the lattice.(-n)
noTimesteps      = 30     # The running timesteps of the simulation.(-t)
randomSeed       = 1      # The seed for the random number generators.(-r)
#maxConcentration = 10.0   # The maximum concentration that can be drawn.(-m)
# Not used anymore... the maxFactorConcentration from the lattice Timeseries
# class is used instead
signalTimestep   = False  # The 'signal on a timestep', introduction switch.(-x)
signalFactor     = False  # The 'signal of a factor', introduction switch.(-s)
animate          = False  # The animation switch.(-a)
border_range     = None   # The border range of the uniform distribution.(-u)
summaryFile      = None   # The filename of the summary statistics file.(-p)



## Command line parsing.
optlist, args = getopt.getopt(sys.argv[1:], 'ahm:n:p:r:s:t:u:x:', ['help'])

for opt, par in optlist :
  if opt in ('-h', '--help') :
    usage()
    sys.exit()
  if opt in ('-n') :
    x = re.compile('x')
    if x.search(par) :
      latticeSize = x.split(par)
      latticeSize = map(lambda x:int(x), latticeSize)
    else :
      raise TypeError, 'Error in the format of -n input options, please check the help (-h, --help) for more information'
  if opt in ('-t') :
    noTimesteps = int(par)
  if opt in ('-r') :
    randomSeed = int(par)
  if opt in ('-m') :
    maxConcentration = float(par)
  if opt in ('-x') :
    var = par.split(':')
    if len(var) != 2 :
      raise TypeError, 'Error in the format of -x input options, please check the help (-h, --help) for more information.'
    if float(var[0]) :
      signalTimestep = True
      tConcentration = float(var[0])
      tTimestep = int(var[1])
  if opt in ('-s') :
    var = par.split(':')
    if len(var) != 2 :
      raise TypeError, 'Error in the format of -s input options, please check the help (-h, --help) for more information.'
    if float(var[1]) :
      signalFactor = True
      sFactorName = var[0]
      sFactorConcentration = float(var[1])
  if opt in ('-a') :
    animate = True
  if opt in ('-p') :
    summaryFile = par
  if opt in ('-u') :
    border_range = float(par)

#print optlist
#sys.exit()



## I/O manipulation.
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout



################
## Main program.
################

# Instantiate and parse the transsys program.
transsysProgram  = transsys.TranssysProgramParser(infile).parse()
# Close the input file.
if infile is not sys.stdin :
  infile.close()

# Instantiate the lattice of transsys programs class.
transInstanceLattice = translattice.TranssysInstanceLattice(transsysProgram, latticeSize)


############################
# Main part of the simulator
############################

# Initialise (or not) the factor concentrations on the lattice.
if border_range :
  transInstanceLattice.initialise_lattice_concentrations(border_range, randomSeed)

# Introduce a signal by specifing a factor and the desired concentration.
if signalFactor :
  transInstanceLattice.introduce_signal(sFactorConcentration, sFactorName)

# Initialise the timeseries class.
transsysLatticeTimeseries = translattice.TranssysLatticeTimeseries(transInstanceLattice, noTimesteps)

# Print the factor table to the output file.
transsysLatticeTimeseries.write_factor_table(outfile)

# Print the summary statistics to a user specified file.
if summaryFile :
  statList = []
  for til in transsysLatticeTimeseries.latticeTimeseries :
    statList.append(til.statistics())
  sumFileObj = open(summaryFile, 'w')
  printing(statList, sumFileObj)

# Image file production and directory manipulation.
# Use the os module to make a directory where all the image files will be
# stored.
os_manipulation(transsysProgram.name)
# Image file production.
maxConcentration = transsysLatticeTimeseries.maxFactorConcentration
for i in xrange(len(transsysLatticeTimeseries.latticeTimeseries)) :
  # Open the graphics file.
  filename = transsysProgram.name + '_t%04d' % i + '.pgm'
  figureFile = open(filename, 'w')
  # Produce the raster graphics files.
  translattice.generate_pgm(figureFile, transsysLatticeTimeseries.latticeTimeseries[i], maxConcentration)
# Image file conversion and animation.
if animate :
  animating()

# Close output file and exit.
if outfile is not sys.stdout :
  outfile.close()

sys.exit()

