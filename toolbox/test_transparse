#!/usr/bin/env python

# $Id$

# $Log$
# Revision 1.3  2005/10/28 19:06:40  jtk
# added RandomTranssysParameter unit test
#
# Revision 1.2  2005/10/13 08:58:35  jtk
# added a first test to unit testing framework
#
# Revision 1.1  2005/10/12 19:32:14  jtk
# parser test (nothing in here yet)
#

import sys
import os
import unittest

import transsys
import transdecode

class TestTranssysParser(unittest.TestCase) :

  def setUp(self) :
    self.tp_check = """transsys check
{
  factor noparam
  {
    decay: 1.0;
    diffusibility: 1.0;
  }

  factor simple
  {
    decay: 0.1;
    diffusibility: 0.3;
  }

  factor complex_expr
  {
    decay: ((noparam > 0.2) && (!((gauss((3.0 * simple), complex_expr) <= (simple + 2.1)))));
    diffusibility: ((complex_expr + noparam) * (simple + 0.4));
  }

  gene noparam_gene
  {
    promoter
    {
      constitutive: 1.1;
    }
    product
    {
      default: noparam;
    }
  }

  gene simple_gene
  {
    promoter
    {
      constitutive: 0.1;
      noparam: activate(0.1, 1.0);
    }
    product
    {
      default: simple;
    }
  }

  gene complex_gene
  {
    promoter
    {
      constitutive: ((0.3 * (!((random(simple, (simple + 0.2)) < complex_expr)))) + noparam);
      simple: activate((complex_expr * 0.01), ((noparam / 0.7) + simple));
    }
    product
    {
      default: complex_expr;
    }
  }

  gene complex_factor_activated
  {
    promoter
    {
      noparam + simple + complex_expr: activate(0.1, 1.0);
    }
    product
    {
      default: noparam;
    }
  }
}
"""
    self.tp_cycler = """transsys cycler
{
  factor A { decay: 0.1; }
  factor R { decay: 0.1; }

  gene agene
  {
    promoter
    {
      constitutive: 0.01;
      A: activate(0.01, 1.0);
      R: repress(0.1, 1.0);
    }
    product
    {
      default: A;
    }
  }

  gene rgene
  {
    promoter
    {
      A: activate(1.0, 10.0);
      R: repress(1.0, 1.0);
    }
    product
    {
      default: R;
    }
  }
}
"""

    self.lsys_arabidopsis = """transsys athgenome
{
  factor t
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor tl
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor elong
  {
    decay: 0.0;
    diffusibility: 0.0;
  }
  factor turtlepar
  {
    decay: 0.0;
    diffusibility: 0.0;
  }

  gene timerticker
  {
    promoter
    {
      constitutive: 0.05;
    }
    product
    {
      default: t;
    }
  }

  gene localticker
  {
    promoter
    {
      constitutive: 0.05;
    }
    product
    {
      default: tl;
    }
  }
}


lsys bolting
{
  diffusionrange: 3;

  symbol germ(athgenome);
  symbol meristem(athgenome);
  symbol axillary(athgenome);
  symbol leaf;
  symbol internode(athgenome);
  symbol hypocotyl;
  symbol cotyledon;
  symbol flowerpedicel;
  symbol flower(athgenome);
  symbol petal;
  symbol [;
  symbol ];

  symbol turtleroll(athgenome);
  symbol turtlebank(athgenome);
  symbol turtleturn(athgenome);

  axiom germ();

  rule germinate
  {
    germ(t) -->
    hypocotyl
    [ cotyledon ]
    turtleroll(turtlepar = 180)
    [ cotyledon ] meristem()
  }
  rule decussate
  {
    meristem(tm) : tm.t < 6 && tm.tl >= 1.0 -->
    turtleroll(turtlepar = 90)
    internode(transsys tm: tl = 0, elong = 0.1)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    turtleroll(turtlepar = 180)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    meristem(transsys tm: tl = 0)
  }
  rule spiral
  {
    meristem(tm) : tm.t >= 6 && tm.tl >= 1.0 -->
    turtleroll(turtlepar = 137.5)
    internode(transsys tm: tl = 0, elong = 0.1)
    [ leaf turtlebank(turtlepar = 20) axillary(transsys tm: tl = 0) ]
    meristem(transsys tm: tl = 0)
  }
  rule grow_flower
  {
    flower(tm) -->
    flowerpedicel
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
    [ petal ] turtleroll(turtlepar = 90)
  }
  rule axil_flower
  {
    axillary(tm) : tm.tl > 1 && tm.tl < 2 && tm.t >= 9 --> flower(transsys tm: )
  }
  rule axil_awake
  {
    axillary(tm) : tm.tl > 1 && tm.tl < 6 && tm.t >= 9 -->
    meristem(transsys tm: )
  }
  rule bolt
  {
    internode(tm) : tm.t > 9 && tm.tl < 5 -->
    internode(transsys tm: elong = tm.elong + 0.025)
  }

  graphics
  {
    germ
    {
      color(1.0, 0.8, 0.2);
      sphere(0.4);
    }
    hypocotyl
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.2, 1.0);
      move(0.5);
    }
    cotyledon
    {
      push();
      bank(80);
      move(0.4);
      bank(90);
      color(0.5, 1.0, 0.0);
      cylinder(0.4, 0.1);
      pop();
    }
    leaf
    {
      push();
      bank(80);
      move(1.0);
      bank(90);
      roll(45);
      color(0.0, 1.0, 0.0);
      box(1.4, 1.4, 0.01);
      pop();
    }
    meristem
    {
      move(0.3);
      color(1, 0, 0);
      sphere(0.3);
      move(0.3);
    }
    axillary
    {
      move(0.3);
      color(0, 0, 1);
      sphere(0.3);
      move(0.3);
    }
    flower
    {
      move(0.2);
      color(1, 1, 1);
      box(0.1, 0.4, 0.4);
      move(0.2);
    }
    petal
    {
      push();
      bank(50);
      move(0.6);
      bank(90);
      roll(45);
      color(1.0, 1.0, 1.0);
      box(1.0, 1.0, 0.01);
      pop();
    }
    internode
    {
      move(0.55 * elong);
      color(0.0, 1.0, 0.0);
      cylinder(0.2, elong);
      move(0.55 * elong);
    }
    flowerpedicel
    {
      move(0.5);
      color(1, 1, 0);
      cylinder(0.1, 1.0);
      move(0.5);
    }
    turtleroll
    {
      roll(turtlepar);
    }
    turtlebank
    {
      bank(turtlepar);
    }
    turtleturn
    {
      turn(turtlepar);
    }
    [ { push(); }
    ] { pop(); }
  }
}
"""

    self.rtp = """RandomTranssysParameters-1.1
topology: random_nk
n: 8
k: 2
topology: end
constitutive: 0.1
km_activation: 0.1
km_repression: 0.1
vmax_activation: 1.0
vmax_repression: 1.0
decay: 0.2
diffusibility: 0.0
rndseed: 1
"""

    self.tdc = """TranssysDNADecoderParameters-1.1
thresholdOffset: 1.1
factorNameTemplate: f%03d
geneNameTemplate: g%03d
geneStartRE: aa
geneEndRE: ttt
repressorAreaLength: 10
activatorAreaLength: 10
decay: 0.3
diffusibility: 0.1
a_spec: 0.2
a_max: 1
constitutive: 0.333
"""

  def getTestTranssys(self) :
    f = open('test.tra', 'w')
    f.write(self.tp_check)
    f.close()
    t = transsys.TranssysProgramParser(open('test.tra', 'r')).parse()
    os.unlink('test.tra')
    return t


  def testTranssysDNADecoder(self) :
    f = open('test.tdc', 'w')
    f.write(self.tdc)
    f.close()
    f = open('test.tdc', 'r')
    t = transdecode.TranssysDNADecoder()
    t.parse(f)
    f.close()
    f = open('test.tdc', 'w')
    t.write(f)
    f.close()
    f = open('test.tdc', 'r')
    s = f.read()
    f.close()
    os.unlink('test.tdc')
    self.assertEqual(self.tdc, s)


  def testSingleTranssys(self) :
    t = self.getTestTranssys()
    self.assertEqual(self.tp_check, str(t))


  def testGetValueNodes(self) :
    t = self.getTestTranssys()
    f = t.find_factor('complex_expr')
    vn = f.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, [0.2, 3.0, 2.1, 0.4])
    g = t.find_gene('complex_gene')
    vn = g.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, [0.3, 0.2, 0.01, 0.7])
    factor_vn = [1.0, 1.0, 0.1, 0.3, 0.2, 3.0, 2.1, 0.4]
    gene_vn = [1.1, 0.1, 0.1, 1.0, 0.3, 0.2, 0.01, 0.7, 0.1, 1.0]
    vn = t.getFactorValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, factor_vn)
    vn = t.getGeneValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, gene_vn)
    vn = t.getValueNodes()
    v = map(lambda n : n.value, vn)
    self.assertEqual(v, factor_vn + gene_vn)


  def testGetIdentifierNodes(self) :
    t = self.getTestTranssys()
    f = t.find_factor('complex_expr')
    identifierNodes = f.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['noparam', 'simple', 'complex_expr', 'simple', 'complex_expr', 'noparam', 'simple'])
    g = t.find_gene('complex_gene')
    identifierNodes = g.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['simple', 'simple', 'complex_expr', 'noparam', 'simple', 'complex_expr', 'noparam', 'simple'])
    g = t.find_gene('complex_factor_activated')
    identifierNodes = g.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, ['noparam', 'simple', 'complex_expr'])
    factor_identifierNodes = ['noparam', 'simple', 'complex_expr', 'simple', 'complex_expr', 'noparam', 'simple']
    gene_identifierNodes = ['noparam', 'simple', 'simple', 'complex_expr', 'noparam', 'simple', 'complex_expr', 'noparam', 'simple', 'noparam', 'simple', 'complex_expr']
    identifierNodes = t.getFactorIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, factor_identifierNodes)
    identifierNodes = t.getGeneIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, gene_identifierNodes)
    identifierNodes = t.getIdentifierNodes()
    v = map(lambda n : n.factor.name, identifierNodes)
    self.assertEqual(v, factor_identifierNodes + gene_identifierNodes)


  def testTimeSeries(self) :
    f = open('test.tra', 'w')
    f.write(self.tp_cycler)
    f.close()
    tp = transsys.TranssysProgramParser(open('test.tra', 'r')).parse()
    os.unlink('test.tra')
    ti = transsys.TranssysInstance(tp)
    ts = ti.time_series(100)
    for i in xrange(100) :
      self.assertEqual(i, ts[i].timestep)
    ti99 = """transsys instance of cycler
timestep: 99
  A: 4.16144e-05
  R: 0.00406464
"""
    self.assertEqual(ti99, str(ts[99]))


  def testLsys(self) :
    f = open('test.trl', 'w')
    f.write(self.lsys_arabidopsis)
    f.close()
    f = open('test.trl', 'r')
    p = transsys.TranssysProgramParser(f)
    tp = p.parse()
    lp = p.parse()
    f.close()
    lp_expect = """lsys bolting
{
  diffusionrange: 3;

  symbol germ(athgenome);
  symbol meristem(athgenome);
  symbol axillary(athgenome);
  symbol leaf;
  symbol internode(athgenome);
  symbol hypocotyl;
  symbol cotyledon;
  symbol flowerpedicel;
  symbol flower(athgenome);
  symbol petal;
  symbol [;
  symbol ];
  symbol turtleroll(athgenome);
  symbol turtlebank(athgenome);
  symbol turtleturn(athgenome);

  axiom germ;

  rule germinate
  {
    germ(t)
    --> hypocotyl [ cotyledon ] turtleroll(turtlepar = 180.0) [ cotyledon ] meristem
  }

  rule decussate
  {
    meristem(tm):
    ((tm.t < 6.0) && (tm.tl >= 1.0))
    --> turtleroll(turtlepar = 90.0) internode(transsys tm: tl = 0.0, elong = 0.1) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] turtleroll(turtlepar = 180.0) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] meristem(transsys tm: tl = 0.0)
  }

  rule spiral
  {
    meristem(tm):
    ((tm.t >= 6.0) && (tm.tl >= 1.0))
    --> turtleroll(turtlepar = 137.5) internode(transsys tm: tl = 0.0, elong = 0.1) [ leaf turtlebank(turtlepar = 20.0) axillary(transsys tm: tl = 0.0) ] meristem(transsys tm: tl = 0.0)
  }

  rule grow_flower
  {
    flower(tm)
    --> flowerpedicel [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0) [ petal ] turtleroll(turtlepar = 90.0)
  }

  rule axil_flower
  {
    axillary(tm):
    (((tm.tl > 1.0) && (tm.tl < 2.0)) && (tm.t >= 9.0))
    --> flower(transsys tm: )
  }

  rule axil_awake
  {
    axillary(tm):
    (((tm.tl > 1.0) && (tm.tl < 6.0)) && (tm.t >= 9.0))
    --> meristem(transsys tm: )
  }

  rule bolt
  {
    internode(tm):
    ((tm.t > 9.0) && (tm.tl < 5.0))
    --> internode(transsys tm: elong = (tm.elong + 0.025))
  }

  graphics
  {
    germ
    {
      color(1.0, 0.8, 0.2);
      sphere(0.4);
    }
    meristem
    {
      move(0.3);
      color(1.0, 0.0, 0.0);
      sphere(0.3);
      move(0.3);
    }
    axillary
    {
      move(0.3);
      color(0.0, 0.0, 1.0);
      sphere(0.3);
      move(0.3);
    }
    leaf
    {
      push();
      bank(80.0);
      move(1.0);
      bank(90.0);
      roll(45.0);
      color(0.0, 1.0, 0.0);
      box(1.4, 1.4, 0.01);
      pop();
    }
    internode
    {
      move((0.55 * elong));
      color(0.0, 1.0, 0.0);
      cylinder(0.2, elong);
      move((0.55 * elong));
    }
    hypocotyl
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.2, 1.0);
      move(0.5);
    }
    cotyledon
    {
      push();
      bank(80.0);
      move(0.4);
      bank(90.0);
      color(0.5, 1.0, 0.0);
      cylinder(0.4, 0.1);
      pop();
    }
    flowerpedicel
    {
      move(0.5);
      color(1.0, 1.0, 0.0);
      cylinder(0.1, 1.0);
      move(0.5);
    }
    flower
    {
      move(0.2);
      color(1.0, 1.0, 1.0);
      box(0.1, 0.4, 0.4);
      move(0.2);
    }
    petal
    {
      push();
      bank(50.0);
      move(0.6);
      bank(90.0);
      roll(45.0);
      color(1.0, 1.0, 1.0);
      box(1.0, 1.0, 0.01);
      pop();
    }
    [
    {
      push();
    }
    ]
    {
      pop();
    }
    turtleroll
    {
      roll(turtlepar);
    }
    turtlebank
    {
      bank(turtlepar);
    }
    turtleturn
    {
      turn(turtlepar);
    }
  }
}
"""
    os.unlink('test.trl')
    self.assertEqual(lp_expect, str(lp))


  def testRandomTranssysParameters(self) :
    f = open('test.rtp', 'w')
    f.write(self.rtp)
    f.close()
    rtp = transsys.RandomTranssysParameters()
    rtp.parse(open('test.rtp', 'r'))
    os.unlink('test.rtp')
    tp = rtp.generate_transsys('test')
    tp_expect = """transsys test
// topology: random_nk
// n: 8
// k: 2
// topology: end
// constitutive: 0.1
// km_activation: 0.1
// km_repression: 0.1
// vmax_activation: 1.0
// vmax_repression: 1.0
// decay: 0.2
// diffusibility: 0.0
// rndseed: 1
// 
// serial #1
{
  factor f0000
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0001
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0002
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0003
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0004
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0005
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0006
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  factor f0007
  {
    decay: 0.2;
    diffusibility: 0.0;
  }

  gene g0000
  {
    promoter
    {
      constitutive: 0.1;
      f0004: repress(0.1, 1.0);
      f0002: activate(0.1, 1.0);
    }
    product
    {
      default: f0000;
    }
  }

  gene g0001
  {
    promoter
    {
      constitutive: 0.1;
      f0006: activate(0.1, 1.0);
      f0003: repress(0.1, 1.0);
    }
    product
    {
      default: f0001;
    }
  }

  gene g0002
  {
    promoter
    {
      constitutive: 0.1;
      f0001: repress(0.1, 1.0);
      f0005: activate(0.1, 1.0);
    }
    product
    {
      default: f0002;
    }
  }

  gene g0003
  {
    promoter
    {
      constitutive: 0.1;
      f0002: activate(0.1, 1.0);
      f0001: repress(0.1, 1.0);
    }
    product
    {
      default: f0003;
    }
  }

  gene g0004
  {
    promoter
    {
      constitutive: 0.1;
      f0001: activate(0.1, 1.0);
      f0007: activate(0.1, 1.0);
    }
    product
    {
      default: f0004;
    }
  }

  gene g0005
  {
    promoter
    {
      constitutive: 0.1;
      f0004: activate(0.1, 1.0);
      f0002: activate(0.1, 1.0);
    }
    product
    {
      default: f0005;
    }
  }

  gene g0006
  {
    promoter
    {
      constitutive: 0.1;
      f0002: activate(0.1, 1.0);
      f0000: activate(0.1, 1.0);
    }
    product
    {
      default: f0006;
    }
  }

  gene g0007
  {
    promoter
    {
      constitutive: 0.1;
      f0000: activate(0.1, 1.0);
      f0006: activate(0.1, 1.0);
    }
    product
    {
      default: f0007;
    }
  }
}
"""
    self.assertEqual(tp_expect, str(tp))
    
    

suite = unittest.TestSuite()
suite.addTest(unittest.makeSuite(TestTranssysParser))
result = unittest.TextTestRunner(verbosity = 2).run(suite)
if result.wasSuccessful() :
  sys.exit()
else :
  sys.exit(1)

# unittest.main()

